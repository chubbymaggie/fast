// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fast.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fast.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fast {
class Element_UnitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Element_Unit> {
} _Element_Unit_default_instance_;
class Element_LiteralDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Element_Literal> {
} _Element_Literal_default_instance_;
class ElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Element> {
  public:
  const ::fast::Element_Unit* unit_;
  const ::fast::Element_Literal* literal_;
} _Element_default_instance_;
class Delta_Diff_MatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff_Match> {
} _Delta_Diff_Match_default_instance_;
class Delta_Diff_AddDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff_Add> {
} _Delta_Diff_Add_default_instance_;
class Delta_Diff_DelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff_Del> {
} _Delta_Diff_Del_default_instance_;
class Delta_Diff_MoveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff_Move> {
} _Delta_Diff_Move_default_instance_;
class Delta_Diff_UpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff_Update> {
} _Delta_Diff_Update_default_instance_;
class Delta_DiffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta_Diff> {
  public:
  const ::fast::Delta_Diff_Match* match_;
  const ::fast::Delta_Diff_Add* add_;
  const ::fast::Delta_Diff_Del* del_;
  const ::fast::Delta_Diff_Move* move_;
  const ::fast::Delta_Diff_Update* update_;
} _Delta_Diff_default_instance_;
class DeltaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta> {
} _Delta_default_instance_;

namespace protobuf_fast_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Unit, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Unit, revision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Unit, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Unit, item_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Literal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element_Literal, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, tail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, child_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Element_default_instance_), unit_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Element_default_instance_), literal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, column_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Element, extra_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Match, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Match, dst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Add, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Add, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Add, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Add, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Del, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Del, src_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Move, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Move, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Move, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Update, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff_Update, label_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Delta_Diff_default_instance_), match_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Delta_Diff_default_instance_), add_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Delta_Diff_default_instance_), del_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Delta_Diff_default_instance_), move_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Delta_Diff_default_instance_), update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta_Diff, delta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, src_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, dst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, diff_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Element_Unit)},
  { 9, -1, sizeof(Element_Literal)},
  { 15, -1, sizeof(Element)},
  { 31, -1, sizeof(Delta_Diff_Match)},
  { 38, -1, sizeof(Delta_Diff_Add)},
  { 46, -1, sizeof(Delta_Diff_Del)},
  { 52, -1, sizeof(Delta_Diff_Move)},
  { 60, -1, sizeof(Delta_Diff_Update)},
  { 67, -1, sizeof(Delta_Diff)},
  { 79, -1, sizeof(Delta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Element_Unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Element_Literal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Element_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_Add_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_Del_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_Diff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fast.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Element_Unit_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Element_Literal_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Element_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Delta_Diff_Match_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Delta_Diff_Add_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Delta_Diff_Del_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Delta_Diff_Move_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Delta_Diff_Update_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Delta_Diff_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Delta_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Element_Unit_default_instance_.DefaultConstruct();
  _Element_Literal_default_instance_.DefaultConstruct();
  _Element_default_instance_.DefaultConstruct();
  _Delta_Diff_Match_default_instance_.DefaultConstruct();
  _Delta_Diff_Add_default_instance_.DefaultConstruct();
  _Delta_Diff_Del_default_instance_.DefaultConstruct();
  _Delta_Diff_Move_default_instance_.DefaultConstruct();
  _Delta_Diff_Update_default_instance_.DefaultConstruct();
  _Delta_Diff_default_instance_.DefaultConstruct();
  _Delta_default_instance_.DefaultConstruct();
  _Element_default_instance_.unit_ = const_cast< ::fast::Element_Unit*>(
      ::fast::Element_Unit::internal_default_instance());
  _Element_default_instance_.literal_ = const_cast< ::fast::Element_Literal*>(
      ::fast::Element_Literal::internal_default_instance());
  _Delta_Diff_default_instance_.match_ = const_cast< ::fast::Delta_Diff_Match*>(
      ::fast::Delta_Diff_Match::internal_default_instance());
  _Delta_Diff_default_instance_.add_ = const_cast< ::fast::Delta_Diff_Add*>(
      ::fast::Delta_Diff_Add::internal_default_instance());
  _Delta_Diff_default_instance_.del_ = const_cast< ::fast::Delta_Diff_Del*>(
      ::fast::Delta_Diff_Del::internal_default_instance());
  _Delta_Diff_default_instance_.move_ = const_cast< ::fast::Delta_Diff_Move*>(
      ::fast::Delta_Diff_Move::internal_default_instance());
  _Delta_Diff_default_instance_.update_ = const_cast< ::fast::Delta_Diff_Update*>(
      ::fast::Delta_Diff_Update::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nfast.proto\022\004fast\"\275^\n\007Element\022 \n\004kind\030\001"
      " \001(\0162\022.fast.Element.Kind\022\014\n\004text\030\002 \001(\t\022\014"
      "\n\004tail\030\003 \001(\t\022\013\n\003pos\030\004 \001(\005\022\016\n\006length\030\005 \001("
      "\005\022\034\n\005child\030\006 \003(\0132\r.fast.Element\022\"\n\004unit\030"
      "\007 \001(\0132\022.fast.Element.UnitH\000\022(\n\007literal\030\010"
      " \001(\0132\025.fast.Element.LiteralH\000\022\014\n\004line\030\t "
      "\001(\005\022\016\n\006column\030\n \001(\005\032\321\001\n\004Unit\022\020\n\010filename"
      "\030\001 \001(\t\022\020\n\010revision\030\002 \001(\t\0221\n\010language\030\003 \001"
      "(\0162\037.fast.Element.Unit.LanguageType\022\014\n\004i"
      "tem\030\004 \001(\005\"d\n\014LanguageType\022\007\n\003ALL\020\000\022\006\n\002OO"
      "\020\001\022\007\n\003CXX\020\002\022\005\n\001C\020\003\022\014\n\010C_FAMILY\020\004\022\010\n\004JAVA"
      "\020\005\022\n\n\006CSHARP\020\006\022\017\n\013OBJECTIVE_C\020\007\032\233\001\n\007Lite"
      "ral\022/\n\004type\030\001 \001(\0162!.fast.Element.Literal"
      ".LiteralType\"_\n\013LiteralType\022\017\n\013number_ty"
      "pe\020\000\022\r\n\tchar_type\020\001\022\017\n\013string_type\020\002\022\020\n\014"
      "boolean_type\020\003\022\r\n\tnull_type\020\004\"\2572\n\004Kind\022\r"
      "\n\tUNIT_KIND\020\000\022\010\n\004DECL\020\001\022\r\n\tDECL_STMT\020\002\022\010"
      "\n\004INIT\020\003\022\010\n\004EXPR\020\004\022\r\n\tEXPR_STMT\020\005\022\013\n\007COM"
      "MENT\020\006\022\010\n\004CALL\020\007\022\013\n\007CONTROL\020\010\022\010\n\004INCR\020\t\022"
      "\010\n\004NONE\020\n\022\014\n\010VARIABLE\020\013\022\014\n\010FUNCTION\020\014\022\021\n"
      "\rFUNCTION_DECL\020\r\022\017\n\013CONSTRUCTOR\020\016\022\024\n\020CON"
      "STRUCTOR_DECL\020\017\022\016\n\nDESTRUCTOR\020\020\022\023\n\017DESTR"
      "UCTOR_DECL\020\021\022\t\n\005MACRO\020\022\022\020\n\014SINGLE_MACRO\020"
      "\023\022\020\n\014NULLOPERATOR\020\024\022\r\n\tENUM_DEFN\020\025\022\r\n\tEN"
      "UM_DECL\020\026\022\024\n\020GLOBAL_ATTRIBUTE\020\027\022\025\n\021PROPE"
      "RTY_ACCESSOR\020\030\022\032\n\026PROPERTY_ACCESSOR_DECL"
      "\020\031\022\016\n\nEXPRESSION\020\032\022\016\n\nCLASS_DEFN\020\033\022\016\n\nCL"
      "ASS_DECL\020\034\022\016\n\nUNION_DEFN\020\035\022\016\n\nUNION_DECL"
      "\020\036\022\017\n\013STRUCT_DEFN\020\037\022\017\n\013STRUCT_DECL\020 \022\022\n\016"
      "INTERFACE_DEFN\020!\022\022\n\016INTERFACE_DECL\020\"\022\021\n\r"
      "ACCESS_REGION\020#\022\t\n\005USING\020$\022\025\n\021OPERATOR_F"
      "UNCTION\020%\022\032\n\026OPERATOR_FUNCTION_DECL\020&\022\t\n"
      "\005EVENT\020\'\022\014\n\010PROPERTY\020(\022\023\n\017ANNOTATION_DEF"
      "N\020)\022\023\n\017GLOBAL_TEMPLATE\020*\022\010\n\004UNIT\020+\022\026\n\022TA"
      "RT_ELEMENT_TOKEN\020,\022\007\n\003NOP\020-\022\n\n\006STRING\020.\022"
      "\010\n\004CHAR\020/\022\013\n\007LITERAL\0200\022\013\n\007BOOLEAN\0201\022\010\n\004N"
      "ULL\0202\022\013\n\007COMPLEX\0203\022\014\n\010OPERATOR\0204\022\014\n\010MODI"
      "FIER\0205\022\010\n\004NAME\0206\022\t\n\005ONAME\0207\022\t\n\005CNAME\0208\022\010"
      "\n\004TYPE\0209\022\014\n\010TYPEPREV\020:\022\r\n\tCONDITION\020;\022\t\n"
      "\005BLOCK\020<\022\020\n\014PSEUDO_BLOCK\020=\022\t\n\005INDEX\020>\022\010\n"
      "\004ENUM\020\?\022\024\n\020ENUM_DECLARATION\020@\022\020\n\014IF_STAT"
      "EMENT\020A\022\013\n\007TERNARY\020B\022\010\n\004THEN\020C\022\010\n\004ELSE\020D"
      "\022\n\n\006ELSEIF\020E\022\023\n\017WHILE_STATEMENT\020F\022\020\n\014DO_"
      "STATEMENT\020G\022\021\n\rFOR_STATEMENT\020H\022\025\n\021FOREAC"
      "H_STATEMENT\020I\022\017\n\013FOR_CONTROL\020J\022\026\n\022FOR_IN"
      "ITIALIZATION\020K\022\021\n\rFOR_CONDITION\020L\022\021\n\rFOR"
      "_INCREMENT\020M\022\024\n\020FOR_LIKE_CONTROL\020N\022\030\n\024EX"
      "PRESSION_STATEMENT\020O\022\021\n\rFUNCTION_CALL\020Q\022"
      "\031\n\025DECLARATION_STATEMENT\020R\022\017\n\013DECLARATIO"
      "N\020S\022\036\n\032DECLARATION_INITIALIZATION\020T\022\025\n\021D"
      "ECLARATION_RANGE\020U\022\t\n\005RANGE\020V\022\022\n\016GOTO_ST"
      "ATEMENT\020W\022\026\n\022CONTINUE_STATEMENT\020X\022\023\n\017BRE"
      "AK_STATEMENT\020Y\022\023\n\017LABEL_STATEMENT\020Z\022\t\n\005L"
      "ABEL\020[\022\n\n\006SWITCH\020\\\022\010\n\004CASE\020]\022\013\n\007DEFAULT\020"
      "^\022\027\n\023FUNCTION_DEFINITION\020_\022\030\n\024FUNCTION_D"
      "ECLARATION\020`\022\n\n\006LAMBDA\020a\022\023\n\017FUNCTION_LAM"
      "BDA\020b\022\026\n\022FUNCTION_SPECIFIER\020c\022\024\n\020RETURN_"
      "STATEMENT\020d\022\022\n\016PARAMETER_LIST\020e\022\r\n\tPARAM"
      "ETER\020f\022\024\n\020KRPARAMETER_LIST\020g\022\017\n\013KRPARAME"
      "TER\020h\022\021\n\rARGUMENT_LIST\020i\022\014\n\010ARGUMENT\020j\022\031"
      "\n\025PSEUDO_PARAMETER_LIST\020k\022\032\n\026INDEXER_PAR"
      "AMETER_LIST\020l\022\t\n\005CLASS\020m\022\025\n\021CLASS_DECLAR"
      "ATION\020n\022\n\n\006STRUCT\020o\022\026\n\022STRUCT_DECLARATIO"
      "N\020p\022\t\n\005UNION\020q\022\025\n\021UNION_DECLARATION\020r\022\023\n"
      "\017DERIVATION_LIST\020s\022\021\n\rPUBLIC_ACCESS\020t\022\031\n"
      "\025PUBLIC_ACCESS_DEFAULT\020u\022\022\n\016PRIVATE_ACCE"
      "SS\020v\022\032\n\026PRIVATE_ACCESS_DEFAULT\020w\022\024\n\020PROT"
      "ECTED_ACCESS\020x\022\034\n\030PROTECTED_ACCESS_DEFAU"
      "LT\020y\022\024\n\020MEMBER_INIT_LIST\020z\022\036\n\032MEMBER_INI"
      "TIALIZATION_LIST\020{\022\031\n\025MEMBER_INITIALIZAT"
      "ION\020|\022\032\n\026CONSTRUCTOR_DEFINITION\020}\022\033\n\027CON"
      "STRUCTOR_DECLARATION\020~\022\031\n\025DESTRUCTOR_DEF"
      "INITION\020\177\022\033\n\026DESTRUCTOR_DECLARATION\020\200\001\022\013"
      "\n\006FRIEND\020\201\001\022\024\n\017CLASS_SPECIFIER\020\202\001\022\016\n\tTRY"
      "_BLOCK\020\203\001\022\020\n\013CATCH_BLOCK\020\204\001\022\022\n\rFINALLY_B"
      "LOCK\020\205\001\022\024\n\017THROW_STATEMENT\020\206\001\022\024\n\017THROW_S"
      "PECIFIER\020\207\001\022\031\n\024THROW_SPECIFIER_JAVA\020\210\001\022\r"
      "\n\010TEMPLATE\020\211\001\022\025\n\020GENERIC_ARGUMENT\020\212\001\022\032\n\025"
      "GENERIC_ARGUMENT_LIST\020\213\001\022\027\n\022TEMPLATE_PAR"
      "AMETER\020\214\001\022\034\n\027TEMPLATE_PARAMETER_LIST\020\215\001\022"
      "\026\n\021GENERIC_PARAMETER\020\216\001\022\033\n\026GENERIC_PARAM"
      "ETER_LIST\020\217\001\022\014\n\007TYPEDEF\020\220\001\022\010\n\003ASM\020\221\001\022\017\n\n"
      "MACRO_CALL\020\222\001\022\020\n\013SIZEOF_CALL\020\223\001\022\013\n\006EXTER"
      "N\020\224\001\022\016\n\tNAMESPACE\020\225\001\022\024\n\017USING_DIRECTIVE\020"
      "\226\001\022\016\n\tDIRECTIVE\020\227\001\022\013\n\006ATOMIC\020\230\001\022\034\n\027STATI"
      "C_ASSERT_STATEMENT\020\231\001\022\026\n\021GENERIC_SELECTI"
      "ON\020\232\001\022\025\n\020GENERIC_SELECTOR\020\233\001\022\035\n\030GENERIC_"
      "ASSOCIATION_LIST\020\234\001\022\030\n\023GENERIC_ASSOCIATI"
      "ON\020\235\001\022\014\n\007ALIGNAS\020\236\001\022\r\n\010DECLTYPE\020\237\001\022\014\n\007CA"
      "PTURE\020\240\001\022\023\n\016LAMBDA_CAPTURE\020\241\001\022\r\n\010NOEXCEP"
      "T\020\242\001\022\r\n\010TYPENAME\020\243\001\022\014\n\007ALIGNOF\020\244\001\022\013\n\006TYP"
      "EID\020\245\001\022\020\n\013SIZEOF_PACK\020\246\001\022\017\n\nENUM_CLASS\020\247"
      "\001\022\033\n\026ENUM_CLASS_DECLARATION\020\250\001\022\022\n\rREF_QU"
      "ALIFIER\020\253\001\022\022\n\rSIGNAL_ACCESS\020\254\001\022\026\n\021FOREVE"
      "R_STATEMENT\020\255\001\022\023\n\016EMIT_STATEMENT\020\256\001\022\022\n\rC"
      "PP_DIRECTIVE\020\257\001\022\021\n\014CPP_FILENAME\020\260\001\022\t\n\004FI"
      "LE\020\261\001\022\013\n\006NUMBER\020\262\001\022\017\n\nCPP_NUMBER\020\263\001\022\020\n\013C"
      "PP_LITERAL\020\264\001\022\023\n\016CPP_MACRO_DEFN\020\265\001\022\024\n\017CP"
      "P_MACRO_VALUE\020\266\001\022\n\n\005ERROR\020\267\001\022\016\n\tCPP_ERRO"
      "R\020\270\001\022\020\n\013CPP_WARNING\020\271\001\022\017\n\nCPP_PRAGMA\020\272\001\022"
      "\020\n\013CPP_INCLUDE\020\273\001\022\017\n\nCPP_DEFINE\020\274\001\022\016\n\tCP"
      "P_UNDEF\020\275\001\022\r\n\010CPP_LINE\020\276\001\022\013\n\006CPP_IF\020\277\001\022\016"
      "\n\tCPP_IFDEF\020\300\001\022\017\n\nCPP_IFNDEF\020\301\001\022\r\n\010CPP_T"
      "HEN\020\302\001\022\r\n\010CPP_ELSE\020\303\001\022\r\n\010CPP_ELIF\020\304\001\022\016\n\t"
      "CPP_EMPTY\020\305\001\022\017\n\nCPP_REGION\020\306\001\022\022\n\rCPP_END"
      "REGION\020\307\001\022\017\n\nUSING_STMT\020\310\001\022\013\n\006ESCAPE\020\311\001\022"
      "\n\n\005VALUE\020\312\001\022\017\n\nCPP_IMPORT\020\313\001\022\016\n\tCPP_ENDI"
      "F\020\314\001\022\013\n\006MARKER\020\315\001\022\020\n\013ERROR_PARSE\020\316\001\022\017\n\nE"
      "RROR_MODE\020\317\001\022\017\n\nIMPLEMENTS\020\320\001\022\014\n\007EXTENDS"
      "\020\321\001\022\013\n\006IMPORT\020\322\001\022\014\n\007PACKAGE\020\323\001\022\025\n\020ASSERT"
      "_STATEMENT\020\324\001\022\016\n\tINTERFACE\020\325\001\022\032\n\025INTERFA"
      "CE_DECLARATION\020\326\001\022\033\n\026SYNCHRONIZED_STATEM"
      "ENT\020\327\001\022\017\n\nANNOTATION\020\330\001\022\021\n\014STATIC_BLOCK\020"
      "\332\001\022\026\n\021CHECKED_STATEMENT\020\333\001\022\030\n\023UNCHECKED_"
      "STATEMENT\020\334\001\022\016\n\tATTRIBUTE\020\335\001\022\013\n\006TARGET\020\336"
      "\001\022\025\n\020UNSAFE_STATEMENT\020\337\001\022\023\n\016LOCK_STATEME"
      "NT\020\340\001\022\024\n\017FIXED_STATEMENT\020\341\001\022\013\n\006TYPEOF\020\342\001"
      "\022\024\n\017USING_STATEMENT\020\343\001\022\026\n\021FUNCTION_DELEG"
      "ATE\020\344\001\022\017\n\nCONSTRAINT\020\346\001\022\t\n\004LINQ\020\347\001\022\t\n\004FR"
      "OM\020\350\001\022\n\n\005WHERE\020\351\001\022\013\n\006SELECT\020\352\001\022\010\n\003LET\020\353\001"
      "\022\014\n\007ORDERBY\020\354\001\022\t\n\004JOIN\020\355\001\022\n\n\005GROUP\020\356\001\022\007\n"
      "\002IN\020\357\001\022\007\n\002ON\020\360\001\022\013\n\006EQUALS\020\361\001\022\007\n\002BY\020\362\001\022\t\n"
      "\004INTO\020\363\001\022\n\n\005EMPTY\020\364\001\022\017\n\nEMPTY_STMT\020\365\001\022\r\n"
      "\010RECEIVER\020\366\001\022\014\n\007MESSAGE\020\367\001\022\r\n\010SELECTOR\020\370"
      "\001\022\022\n\rPROTOCOL_LIST\020\371\001\022\r\n\010CATEGORY\020\372\001\022\r\n\010"
      "PROTOCOL\020\373\001\022\025\n\020REQUIRED_DEFAULT\020\374\001\022\r\n\010RE"
      "QUIRED\020\375\001\022\r\n\010OPTIONAL\020\376\001\022\023\n\016ATTRIBUTE_LI"
      "ST\020\200\002\022\017\n\nSYNTHESIZE\020\201\002\022\014\n\007DYNAMIC\020\202\002\022\013\n\006"
      "ENCODE\020\203\002\022\024\n\017AUTORELEASEPOOL\020\204\002\022\030\n\023COMPA"
      "TIBILITY_ALIAS\020\205\002\022\010\n\003NIL\020\206\002\022\024\n\017CLASS_INT"
      "ERFACE\020\207\002\022\031\n\024CLASS_IMPLEMENTATION\020\210\002\022\031\n\024"
      "PROTOCOL_DECLARATION\020\211\002\022\t\n\004CAST\020\212\002\022\017\n\nCO"
      "NST_CAST\020\213\002\022\021\n\014DYNAMIC_CAST\020\214\002\022\025\n\020REINTE"
      "RPRET_CAST\020\215\002\022\020\n\013STATIC_CAST\020\216\002\022\r\n\010POSIT"
      "ION\020\217\002\022\027\n\022CUDA_ARGUMENT_LIST\020\220\002\022\022\n\rOMP_D"
      "IRECTIVE\020\221\002\022\r\n\010OMP_NAME\020\222\002\022\017\n\nOMP_CLAUSE"
      "\020\223\002\022\026\n\021OMP_ARGUMENT_LIST\020\224\002\022\021\n\014OMP_ARGUM"
      "ENT\020\225\002\022\023\n\016OMP_EXPRESSION\020\226\002\022\026\n\021END_ELEME"
      "NT_TOKEN\020\227\002\022\t\n\004MAIN\020\230\002\022\n\n\005BREAK\020\231\002\022\r\n\010CO"
      "NTINUE\020\232\002\022\n\n\005WHILE\020\233\002\022\007\n\002DO\020\234\002\022\010\n\003FOR\020\235\002"
      "\022\007\n\002IF\020\236\002\022\t\n\004GOTO\020\245\002\022\023\n\016VISUAL_CXX_ASM\020\247"
      "\002\022\013\n\006SIZEOF\020\250\002\022\t\n\004AUTO\020\252\002\022\r\n\010REGISTER\020\253\002"
      "\022\r\n\010RESTRICT\020\254\002\022\016\n\tIMAGINARY\020\260\002\022\r\n\010NORET"
      "URN\020\261\002\022\022\n\rSTATIC_ASSERT\020\262\002\022\016\n\tCRESTRICT\020"
      "\263\002\022\014\n\007CXX_TRY\020\264\002\022\016\n\tCXX_CATCH\020\265\002\022\016\n\tCXX_"
      "CLASS\020\266\002\022\016\n\tCONSTEXPR\020\267\002\022\021\n\014THREAD_LOCAL"
      "\020\271\002\022\014\n\007NULLPTR\020\272\002\022\t\n\004VOID\020\306\002\022\013\n\006RETURN\020\307"
      "\002\022\014\n\007INCLUDE\020\310\002\022\013\n\006DEFINE\020\311\002\022\t\n\004ELIF\020\312\002\022"
      "\n\n\005ENDIF\020\313\002\022\016\n\tERRORPREC\020\314\002\022\014\n\007WARNING\020\315"
      "\002\022\n\n\005IFDEF\020\316\002\022\013\n\006IFNDEF\020\317\002\022\t\n\004LINE\020\320\002\022\013\n"
      "\006PRAGMA\020\321\002\022\n\n\005UNDEF\020\322\002\022\013\n\006INLINE\020\323\002\022\024\n\017M"
      "ACRO_TYPE_NAME\020\324\002\022\017\n\nMACRO_CASE\020\325\002\022\020\n\013MA"
      "CRO_LABEL\020\326\002\022\016\n\tSPECIFIER\020\330\002\022\010\n\003TRY\020\331\002\022\n"
      "\n\005CATCH\020\332\002\022\n\n\005THROW\020\333\002\022\013\n\006THROWS\020\334\002\022\013\n\006P"
      "UBLIC\020\336\002\022\014\n\007PRIVATE\020\337\002\022\016\n\tPROTECTED\020\340\002\022\014"
      "\n\007VIRTUAL\020\341\002\022\r\n\010EXPLICIT\020\344\002\022\014\n\007FOREVER\020\345"
      "\002\022\013\n\006SIGNAL\020\346\002\022\t\n\004EMIT\020\347\002\022\010\n\003NEW\020\353\002\022\013\n\006D"
      "ELETE\020\354\002\022\013\n\006STATIC\020\355\002\022\n\n\005CONST\020\356\002\022\014\n\007MUT"
      "ABLE\020\357\002\022\r\n\010VOLATILE\020\360\002\022\016\n\tTRANSIENT\020\361\002\022\014"
      "\n\007FINALLY\020\364\002\022\n\n\005FINAL\020\370\002\022\r\n\010ABSTRACT\020\371\002\022"
      "\n\n\005SUPER\020\372\002\022\021\n\014SYNCHRONIZED\020\373\002\022\013\n\006NATIVE"
      "\020\374\002\022\r\n\010STRICTFP\020\375\002\022\020\n\013NULLLITERAL\020\376\002\022\013\n\006"
      "ASSERT\020\377\002\022\014\n\007FOREACH\020\200\003\022\010\n\003REF\020\201\003\022\010\n\003OUT"
      "\020\202\003\022\t\n\004LOCK\020\204\003\022\007\n\002IS\020\205\003\022\r\n\010INTERNAL\020\206\003\022\013"
      "\n\006SEALED\020\207\003\022\r\n\010OVERRIDE\020\210\003\022\r\n\010IMPLICIT\020\211"
      "\003\022\017\n\nSTACKALLOC\020\212\003\022\007\n\002AS\020\213\003\022\r\n\010DELEGATE\020"
      "\214\003\022\n\n\005FIXED\020\215\003\022\014\n\007CHECKED\020\216\003\022\016\n\tUNCHECKE"
      "D\020\217\003\022\013\n\006REGION\020\220\003\022\016\n\tENDREGION\020\221\003\022\013\n\006UNS"
      "AFE\020\222\003\022\r\n\010READONLY\020\223\003\022\010\n\003GET\020\224\003\022\010\n\003SET\020\225"
      "\003\022\010\n\003ADD\020\226\003\022\013\n\006REMOVE\020\227\003\022\n\n\005YIELD\020\230\003\022\014\n\007"
      "PARTIAL\020\231\003\022\n\n\005AWAIT\020\232\003\022\n\n\005ASYNC\020\234\003\022\t\n\004TH"
      "IS\020\235\003\022\013\n\006PARAMS\020\236\003\022\n\n\005ALIAS\020\240\003\022\016\n\tASCEND"
      "ING\020\246\003\022\017\n\nDESCENDING\020\247\003\022\020\n\013ATINTERFACE\020\256"
      "\003\022\025\n\020ATIMPLEMENTATION\020\257\003\022\n\n\005ATEND\020\260\003\022\017\n\n"
      "ATPROTOCOL\020\261\003\022\017\n\nATREQUIRED\020\262\003\022\017\n\nATOPTI"
      "ONAL\020\263\003\022\014\n\007ATCLASS\020\271\003\022\t\n\004WEAK\020\273\003\022\013\n\006STRO"
      "NG\020\274\003\022\014\n\007OMP_OMP\020\300\003\022\022\n\rSPECIAL_CHARS\020\301\003\""
      "\237\'\n\tSmaliKind\022\013\n\007INVALID\020\000\022\007\n\003EOR\020\001\022\010\n\004D"
      "OWN\020\002\022\006\n\002UP\020\003\022\017\n\013ACCESS_SPEC\020\004\022\030\n\024ANNOTA"
      "TION_DIRECTIVE\020\005\022\031\n\025ANNOTATION_VISIBILIT"
      "Y\020\006\022\030\n\024ARRAY_DATA_DIRECTIVE\020\007\022\025\n\021ARRAY_T"
      "YPE_PREFIX\020\010\022\t\n\005ARROW\020\t\022\020\n\014BOOL_LITERAL\020"
      "\n\022\020\n\014BYTE_LITERAL\020\013\022\026\n\022CATCHALL_DIRECTIV"
      "E\020\014\022\023\n\017CATCH_DIRECTIVE\020\r\022\020\n\014CHAR_LITERAL"
      "\020\016\022\024\n\020CLASS_DESCRIPTOR\020\017\022\023\n\017CLASS_DIRECT"
      "IVE\020\020\022\017\n\013CLOSE_BRACE\020\021\022\017\n\013CLOSE_PAREN\020\022\022"
      "\t\n\005COLON\020\023\022\t\n\005COMMA\020\024\022\n\n\006DOTDOT\020\025\022\022\n\016DOU"
      "BLE_LITERAL\020\026\022\030\n\024DOUBLE_LITERAL_OR_ID\020\027\022"
      "\034\n\030END_ANNOTATION_DIRECTIVE\020\030\022\034\n\030END_ARR"
      "AY_DATA_DIRECTIVE\020\031\022\027\n\023END_FIELD_DIRECTI"
      "VE\020\032\022\027\n\023END_LOCAL_DIRECTIVE\020\033\022\030\n\024END_MET"
      "HOD_DIRECTIVE\020\034\022\037\n\033END_PACKED_SWITCH_DIR"
      "ECTIVE\020\035\022\033\n\027END_PARAMETER_DIRECTIVE\020\036\022\037\n"
      "\033END_SPARSE_SWITCH_DIRECTIVE\020\037\022\037\n\033END_SU"
      "BANNOTATION_DIRECTIVE\020 \022\022\n\016ENUM_DIRECTIV"
      "E\020!\022\026\n\022EPILOGUE_DIRECTIVE\020\"\022\t\n\005EQUAL\020#\022\023"
      "\n\017FIELD_DIRECTIVE\020$\022\020\n\014FIELD_OFFSET\020%\022\021\n"
      "\rFLOAT_LITERAL\020&\022\027\n\023FLOAT_LITERAL_OR_ID\020"
      "\'\022\030\n\024IMPLEMENTS_DIRECTIVE\020(\022\020\n\014INLINE_IN"
      "DEX\020)\022\031\n\025INSTRUCTION_FORMAT10t\020*\022\031\n\025INST"
      "RUCTION_FORMAT10x\020+\022\036\n\032INSTRUCTION_FORMA"
      "T10x_ODEX\020,\022\031\n\025INSTRUCTION_FORMAT11n\020-\022\031"
      "\n\025INSTRUCTION_FORMAT11x\020.\022\031\n\025INSTRUCTION"
      "_FORMAT12x\020/\022\037\n\033INSTRUCTION_FORMAT12x_OR"
      "_ID\0200\022\032\n\026INSTRUCTION_FORMAT20bc\0201\022\031\n\025INS"
      "TRUCTION_FORMAT20t\0202\022\037\n\033INSTRUCTION_FORM"
      "AT21c_FIELD\0203\022$\n INSTRUCTION_FORMAT21c_F"
      "IELD_ODEX\0204\022 \n\034INSTRUCTION_FORMAT21c_STR"
      "ING\0205\022\036\n\032INSTRUCTION_FORMAT21c_TYPE\0206\022\032\n"
      "\026INSTRUCTION_FORMAT21ih\0207\022\032\n\026INSTRUCTION"
      "_FORMAT21lh\0208\022\031\n\025INSTRUCTION_FORMAT21s\0209"
      "\022\031\n\025INSTRUCTION_FORMAT21t\020:\022\031\n\025INSTRUCTI"
      "ON_FORMAT22b\020;\022\037\n\033INSTRUCTION_FORMAT22c_"
      "FIELD\020<\022$\n INSTRUCTION_FORMAT22c_FIELD_O"
      "DEX\020=\022\036\n\032INSTRUCTION_FORMAT22c_TYPE\020>\022 \n"
      "\034INSTRUCTION_FORMAT22cs_FIELD\020\?\022\031\n\025INSTR"
      "UCTION_FORMAT22s\020@\022\037\n\033INSTRUCTION_FORMAT"
      "22s_OR_ID\020A\022\031\n\025INSTRUCTION_FORMAT22t\020B\022\031"
      "\n\025INSTRUCTION_FORMAT22x\020C\022\031\n\025INSTRUCTION"
      "_FORMAT23x\020D\022\031\n\025INSTRUCTION_FORMAT30t\020E\022"
      "\031\n\025INSTRUCTION_FORMAT31c\020F\022\031\n\025INSTRUCTIO"
      "N_FORMAT31i\020G\022\037\n\033INSTRUCTION_FORMAT31i_O"
      "R_ID\020H\022\031\n\025INSTRUCTION_FORMAT31t\020I\022\031\n\025INS"
      "TRUCTION_FORMAT32x\020J\022 \n\034INSTRUCTION_FORM"
      "AT35c_METHOD\020K\022%\n!INSTRUCTION_FORMAT35c_"
      "METHOD_ODEX\020L\022\036\n\032INSTRUCTION_FORMAT35c_T"
      "YPE\020M\022!\n\035INSTRUCTION_FORMAT35mi_METHOD\020N"
      "\022!\n\035INSTRUCTION_FORMAT35ms_METHOD\020O\022 \n\034I"
      "NSTRUCTION_FORMAT3rc_METHOD\020P\022%\n!INSTRUC"
      "TION_FORMAT3rc_METHOD_ODEX\020Q\022\036\n\032INSTRUCT"
      "ION_FORMAT3rc_TYPE\020R\022!\n\035INSTRUCTION_FORM"
      "AT3rmi_METHOD\020S\022!\n\035INSTRUCTION_FORMAT3rm"
      "s_METHOD\020T\022!\n\035INSTRUCTION_FORMAT45cc_MET"
      "HOD\020U\022!\n\035INSTRUCTION_FORMAT4rcc_METHOD\020V"
      "\022\031\n\025INSTRUCTION_FORMAT51l\020W\022\023\n\017INTEGER_L"
      "ITERAL\020X\022\021\n\rINVALID_TOKEN\020Y\022\021\n\rI_ACCESS_"
      "LIST\020Z\022\020\n\014I_ANNOTATION\020[\022\021\n\rI_ANNOTATION"
      "S\020\\\022\030\n\024I_ANNOTATION_ELEMENT\020]\022\024\n\020I_ARRAY"
      "_ELEMENTS\020^\022\030\n\024I_ARRAY_ELEMENT_SIZE\020_\022\013\n"
      "\007I_CATCH\020`\022\016\n\nI_CATCHALL\020a\022\r\n\tI_CATCHES\020"
      "b\022\017\n\013I_CLASS_DEF\020c\022\023\n\017I_ENCODED_ARRAY\020d\022"
      "\022\n\016I_ENCODED_ENUM\020e\022\023\n\017I_ENCODED_FIELD\020f"
      "\022\024\n\020I_ENCODED_METHOD\020g\022\017\n\013I_END_LOCAL\020h\022"
      "\016\n\nI_EPILOGUE\020i\022\013\n\007I_FIELD\020j\022\014\n\010I_FIELDS"
      "\020k\022\031\n\025I_FIELD_INITIAL_VALUE\020l\022\020\n\014I_FIELD"
      "_TYPE\020m\022\020\n\014I_IMPLEMENTS\020n\022\013\n\007I_LABEL\020o\022\n"
      "\n\006I_LINE\020p\022\013\n\007I_LOCAL\020q\022\014\n\010I_LOCALS\020r\022\014\n"
      "\010I_METHOD\020s\022\r\n\tI_METHODS\020t\022\026\n\022I_METHOD_P"
      "ROTOTYPE\020u\022\030\n\024I_METHOD_RETURN_TYPE\020v\022\032\n\026"
      "I_ORDERED_METHOD_ITEMS\020w\022\034\n\030I_PACKED_SWI"
      "TCH_ELEMENTS\020x\022\035\n\031I_PACKED_SWITCH_START_"
      "KEY\020y\022\017\n\013I_PARAMETER\020z\022\020\n\014I_PARAMETERS\020{"
      "\022\035\n\031I_PARAMETER_NOT_SPECIFIED\020|\022\016\n\nI_PRO"
      "LOGUE\020}\022\017\n\013I_REGISTERS\020~\022\023\n\017I_REGISTER_L"
      "IST\020\177\022\025\n\020I_REGISTER_RANGE\020\200\001\022\024\n\017I_RESTAR"
      "T_LOCAL\020\201\001\022\r\n\010I_SOURCE\020\202\001\022\035\n\030I_SPARSE_SW"
      "ITCH_ELEMENTS\020\203\001\022\033\n\026I_STATEMENT_ARRAY_DA"
      "TA\020\204\001\022\032\n\025I_STATEMENT_FORMAT10t\020\205\001\022\032\n\025I_S"
      "TATEMENT_FORMAT10x\020\206\001\022\032\n\025I_STATEMENT_FOR"
      "MAT11n\020\207\001\022\032\n\025I_STATEMENT_FORMAT11x\020\210\001\022\032\n"
      "\025I_STATEMENT_FORMAT12x\020\211\001\022\033\n\026I_STATEMENT"
      "_FORMAT20bc\020\212\001\022\032\n\025I_STATEMENT_FORMAT20t\020"
      "\213\001\022 \n\033I_STATEMENT_FORMAT21c_FIELD\020\214\001\022!\n\034"
      "I_STATEMENT_FORMAT21c_STRING\020\215\001\022\037\n\032I_STA"
      "TEMENT_FORMAT21c_TYPE\020\216\001\022\033\n\026I_STATEMENT_"
      "FORMAT21ih\020\217\001\022\033\n\026I_STATEMENT_FORMAT21lh\020"
      "\220\001\022\032\n\025I_STATEMENT_FORMAT21s\020\221\001\022\032\n\025I_STAT"
      "EMENT_FORMAT21t\020\222\001\022\032\n\025I_STATEMENT_FORMAT"
      "22b\020\223\001\022 \n\033I_STATEMENT_FORMAT22c_FIELD\020\224\001"
      "\022\037\n\032I_STATEMENT_FORMAT22c_TYPE\020\225\001\022\032\n\025I_S"
      "TATEMENT_FORMAT22s\020\226\001\022\032\n\025I_STATEMENT_FOR"
      "MAT22t\020\227\001\022\032\n\025I_STATEMENT_FORMAT22x\020\230\001\022\032\n"
      "\025I_STATEMENT_FORMAT23x\020\231\001\022\032\n\025I_STATEMENT"
      "_FORMAT30t\020\232\001\022\032\n\025I_STATEMENT_FORMAT31c\020\233"
      "\001\022\032\n\025I_STATEMENT_FORMAT31i\020\234\001\022\032\n\025I_STATE"
      "MENT_FORMAT31t\020\235\001\022\032\n\025I_STATEMENT_FORMAT3"
      "2x\020\236\001\022!\n\034I_STATEMENT_FORMAT35c_METHOD\020\237\001"
      "\022\037\n\032I_STATEMENT_FORMAT35c_TYPE\020\240\001\022!\n\034I_S"
      "TATEMENT_FORMAT3rc_METHOD\020\241\001\022\037\n\032I_STATEM"
      "ENT_FORMAT3rc_TYPE\020\242\001\022\"\n\035I_STATEMENT_FOR"
      "MAT45cc_METHOD\020\243\001\022\"\n\035I_STATEMENT_FORMAT4"
      "rcc_METHOD\020\244\001\022\032\n\025I_STATEMENT_FORMAT51l\020\245"
      "\001\022\036\n\031I_STATEMENT_PACKED_SWITCH\020\246\001\022\036\n\031I_S"
      "TATEMENT_SPARSE_SWITCH\020\247\001\022\024\n\017I_SUBANNOTA"
      "TION\020\250\001\022\014\n\007I_SUPER\020\251\001\022\021\n\014LINE_COMMENT\020\252\001"
      "\022\023\n\016LINE_DIRECTIVE\020\253\001\022\025\n\020LOCALS_DIRECTIV"
      "E\020\254\001\022\024\n\017LOCAL_DIRECTIVE\020\255\001\022\021\n\014LONG_LITER"
      "AL\020\256\001\022\020\n\013MEMBER_NAME\020\257\001\022\025\n\020METHOD_DIRECT"
      "IVE\020\260\001\022\035\n\030NEGATIVE_INTEGER_LITERAL\020\261\001\022\021\n"
      "\014NULL_LITERAL\020\262\001\022\017\n\nOPEN_BRACE\020\263\001\022\017\n\nOPE"
      "N_PAREN\020\264\001\022\034\n\027PACKED_SWITCH_DIRECTIVE\020\265\001"
      "\022\030\n\023PARAMETER_DIRECTIVE\020\266\001\022$\n\037PARAM_LIST"
      "_OR_ID_PRIMITIVE_TYPE\020\267\001\022\035\n\030POSITIVE_INT"
      "EGER_LITERAL\020\270\001\022\023\n\016PRIMITIVE_TYPE\020\271\001\022\027\n\022"
      "PROLOGUE_DIRECTIVE\020\272\001\022\023\n\016SMALI_REGISTER\020"
      "\273\001\022\030\n\023REGISTERS_DIRECTIVE\020\274\001\022\034\n\027RESTART_"
      "LOCAL_DIRECTIVE\020\275\001\022\022\n\rSHORT_LITERAL\020\276\001\022\020"
      "\n\013SIMPLE_NAME\020\277\001\022\025\n\020SOURCE_DIRECTIVE\020\300\001\022"
      "\034\n\027SPARSE_SWITCH_DIRECTIVE\020\301\001\022\023\n\016STRING_"
      "LITERAL\020\302\001\022\034\n\027SUBANNOTATION_DIRECTIVE\020\303\001"
      "\022\024\n\017SUPER_DIRECTIVE\020\304\001\022\034\n\027VERIFICATION_E"
      "RROR_TYPE\020\305\001\022\016\n\tVOID_TYPE\020\306\001\022\021\n\014VTABLE_I"
      "NDEX\020\307\001\022\020\n\013WHITE_SPACE\020\310\001B\007\n\005extra\"\306\004\n\005D"
      "elta\022\013\n\003src\030\001 \001(\t\022\013\n\003dst\030\002 \001(\t\022\036\n\004diff\030\003"
      " \003(\0132\020.fast.Delta.Diff\032\202\004\n\004Diff\022(\n\004type\030"
      "\001 \001(\0162\032.fast.Delta.Diff.DeltaType\022\'\n\005mat"
      "ch\030\002 \001(\0132\026.fast.Delta.Diff.MatchH\000\022#\n\003ad"
      "d\030\003 \001(\0132\024.fast.Delta.Diff.AddH\000\022#\n\003del\030\004"
      " \001(\0132\024.fast.Delta.Diff.DelH\000\022%\n\004move\030\005 \001"
      "(\0132\025.fast.Delta.Diff.MoveH\000\022)\n\006update\030\006 "
      "\001(\0132\027.fast.Delta.Diff.UpdateH\000\032!\n\005Match\022"
      "\013\n\003src\030\001 \001(\005\022\013\n\003dst\030\002 \001(\005\0321\n\003Add\022\013\n\003src\030"
      "\001 \001(\005\022\013\n\003dst\030\002 \001(\005\022\020\n\010position\030\003 \001(\005\032\022\n\003"
      "Del\022\013\n\003src\030\001 \001(\005\0322\n\004Move\022\013\n\003src\030\001 \001(\005\022\013\n"
      "\003dst\030\002 \001(\005\022\020\n\010position\030\003 \001(\005\032$\n\006Update\022\013"
      "\n\003src\030\001 \001(\005\022\r\n\005label\030\002 \001(\t\">\n\tDeltaType\022"
      "\t\n\005MATCH\020\000\022\007\n\003ADD\020\001\022\007\n\003DEL\020\002\022\010\n\004MOVE\020\003\022\n"
      "\n\006UPDATE\020\004B\007\n\005deltab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 12707);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fast.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fast_2eproto

const ::google::protobuf::EnumDescriptor* Element_Unit_LanguageType_descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_enum_descriptors[0];
}
bool Element_Unit_LanguageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Element_Unit_LanguageType Element_Unit::ALL;
const Element_Unit_LanguageType Element_Unit::OO;
const Element_Unit_LanguageType Element_Unit::CXX;
const Element_Unit_LanguageType Element_Unit::C;
const Element_Unit_LanguageType Element_Unit::C_FAMILY;
const Element_Unit_LanguageType Element_Unit::JAVA;
const Element_Unit_LanguageType Element_Unit::CSHARP;
const Element_Unit_LanguageType Element_Unit::OBJECTIVE_C;
const Element_Unit_LanguageType Element_Unit::LanguageType_MIN;
const Element_Unit_LanguageType Element_Unit::LanguageType_MAX;
const int Element_Unit::LanguageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Element_Literal_LiteralType_descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_enum_descriptors[1];
}
bool Element_Literal_LiteralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Element_Literal_LiteralType Element_Literal::number_type;
const Element_Literal_LiteralType Element_Literal::char_type;
const Element_Literal_LiteralType Element_Literal::string_type;
const Element_Literal_LiteralType Element_Literal::boolean_type;
const Element_Literal_LiteralType Element_Literal::null_type;
const Element_Literal_LiteralType Element_Literal::LiteralType_MIN;
const Element_Literal_LiteralType Element_Literal::LiteralType_MAX;
const int Element_Literal::LiteralType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Element_Kind_descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_enum_descriptors[2];
}
bool Element_Kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 293:
    case 295:
    case 296:
    case 298:
    case 299:
    case 300:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 313:
    case 314:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 350:
    case 351:
    case 352:
    case 353:
    case 356:
    case 357:
    case 358:
    case 359:
    case 363:
    case 364:
    case 365:
    case 366:
    case 367:
    case 368:
    case 369:
    case 372:
    case 376:
    case 377:
    case 378:
    case 379:
    case 380:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 386:
    case 388:
    case 389:
    case 390:
    case 391:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 412:
    case 413:
    case 414:
    case 416:
    case 422:
    case 423:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 441:
    case 443:
    case 444:
    case 448:
    case 449:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Element_Kind Element::UNIT_KIND;
const Element_Kind Element::DECL;
const Element_Kind Element::DECL_STMT;
const Element_Kind Element::INIT;
const Element_Kind Element::EXPR;
const Element_Kind Element::EXPR_STMT;
const Element_Kind Element::COMMENT;
const Element_Kind Element::CALL;
const Element_Kind Element::CONTROL;
const Element_Kind Element::INCR;
const Element_Kind Element::NONE;
const Element_Kind Element::VARIABLE;
const Element_Kind Element::FUNCTION;
const Element_Kind Element::FUNCTION_DECL;
const Element_Kind Element::CONSTRUCTOR;
const Element_Kind Element::CONSTRUCTOR_DECL;
const Element_Kind Element::DESTRUCTOR;
const Element_Kind Element::DESTRUCTOR_DECL;
const Element_Kind Element::MACRO;
const Element_Kind Element::SINGLE_MACRO;
const Element_Kind Element::NULLOPERATOR;
const Element_Kind Element::ENUM_DEFN;
const Element_Kind Element::ENUM_DECL;
const Element_Kind Element::GLOBAL_ATTRIBUTE;
const Element_Kind Element::PROPERTY_ACCESSOR;
const Element_Kind Element::PROPERTY_ACCESSOR_DECL;
const Element_Kind Element::EXPRESSION;
const Element_Kind Element::CLASS_DEFN;
const Element_Kind Element::CLASS_DECL;
const Element_Kind Element::UNION_DEFN;
const Element_Kind Element::UNION_DECL;
const Element_Kind Element::STRUCT_DEFN;
const Element_Kind Element::STRUCT_DECL;
const Element_Kind Element::INTERFACE_DEFN;
const Element_Kind Element::INTERFACE_DECL;
const Element_Kind Element::ACCESS_REGION;
const Element_Kind Element::USING;
const Element_Kind Element::OPERATOR_FUNCTION;
const Element_Kind Element::OPERATOR_FUNCTION_DECL;
const Element_Kind Element::EVENT;
const Element_Kind Element::PROPERTY;
const Element_Kind Element::ANNOTATION_DEFN;
const Element_Kind Element::GLOBAL_TEMPLATE;
const Element_Kind Element::UNIT;
const Element_Kind Element::TART_ELEMENT_TOKEN;
const Element_Kind Element::NOP;
const Element_Kind Element::STRING;
const Element_Kind Element::CHAR;
const Element_Kind Element::LITERAL;
const Element_Kind Element::BOOLEAN;
const Element_Kind Element::NULL_;
const Element_Kind Element::COMPLEX;
const Element_Kind Element::OPERATOR;
const Element_Kind Element::MODIFIER;
const Element_Kind Element::NAME;
const Element_Kind Element::ONAME;
const Element_Kind Element::CNAME;
const Element_Kind Element::TYPE;
const Element_Kind Element::TYPEPREV;
const Element_Kind Element::CONDITION;
const Element_Kind Element::BLOCK;
const Element_Kind Element::PSEUDO_BLOCK;
const Element_Kind Element::INDEX;
const Element_Kind Element::ENUM;
const Element_Kind Element::ENUM_DECLARATION;
const Element_Kind Element::IF_STATEMENT;
const Element_Kind Element::TERNARY;
const Element_Kind Element::THEN;
const Element_Kind Element::ELSE;
const Element_Kind Element::ELSEIF;
const Element_Kind Element::WHILE_STATEMENT;
const Element_Kind Element::DO_STATEMENT;
const Element_Kind Element::FOR_STATEMENT;
const Element_Kind Element::FOREACH_STATEMENT;
const Element_Kind Element::FOR_CONTROL;
const Element_Kind Element::FOR_INITIALIZATION;
const Element_Kind Element::FOR_CONDITION;
const Element_Kind Element::FOR_INCREMENT;
const Element_Kind Element::FOR_LIKE_CONTROL;
const Element_Kind Element::EXPRESSION_STATEMENT;
const Element_Kind Element::FUNCTION_CALL;
const Element_Kind Element::DECLARATION_STATEMENT;
const Element_Kind Element::DECLARATION;
const Element_Kind Element::DECLARATION_INITIALIZATION;
const Element_Kind Element::DECLARATION_RANGE;
const Element_Kind Element::RANGE;
const Element_Kind Element::GOTO_STATEMENT;
const Element_Kind Element::CONTINUE_STATEMENT;
const Element_Kind Element::BREAK_STATEMENT;
const Element_Kind Element::LABEL_STATEMENT;
const Element_Kind Element::LABEL;
const Element_Kind Element::SWITCH;
const Element_Kind Element::CASE;
const Element_Kind Element::DEFAULT;
const Element_Kind Element::FUNCTION_DEFINITION;
const Element_Kind Element::FUNCTION_DECLARATION;
const Element_Kind Element::LAMBDA;
const Element_Kind Element::FUNCTION_LAMBDA;
const Element_Kind Element::FUNCTION_SPECIFIER;
const Element_Kind Element::RETURN_STATEMENT;
const Element_Kind Element::PARAMETER_LIST;
const Element_Kind Element::PARAMETER;
const Element_Kind Element::KRPARAMETER_LIST;
const Element_Kind Element::KRPARAMETER;
const Element_Kind Element::ARGUMENT_LIST;
const Element_Kind Element::ARGUMENT;
const Element_Kind Element::PSEUDO_PARAMETER_LIST;
const Element_Kind Element::INDEXER_PARAMETER_LIST;
const Element_Kind Element::CLASS;
const Element_Kind Element::CLASS_DECLARATION;
const Element_Kind Element::STRUCT;
const Element_Kind Element::STRUCT_DECLARATION;
const Element_Kind Element::UNION;
const Element_Kind Element::UNION_DECLARATION;
const Element_Kind Element::DERIVATION_LIST;
const Element_Kind Element::PUBLIC_ACCESS;
const Element_Kind Element::PUBLIC_ACCESS_DEFAULT;
const Element_Kind Element::PRIVATE_ACCESS;
const Element_Kind Element::PRIVATE_ACCESS_DEFAULT;
const Element_Kind Element::PROTECTED_ACCESS;
const Element_Kind Element::PROTECTED_ACCESS_DEFAULT;
const Element_Kind Element::MEMBER_INIT_LIST;
const Element_Kind Element::MEMBER_INITIALIZATION_LIST;
const Element_Kind Element::MEMBER_INITIALIZATION;
const Element_Kind Element::CONSTRUCTOR_DEFINITION;
const Element_Kind Element::CONSTRUCTOR_DECLARATION;
const Element_Kind Element::DESTRUCTOR_DEFINITION;
const Element_Kind Element::DESTRUCTOR_DECLARATION;
const Element_Kind Element::FRIEND;
const Element_Kind Element::CLASS_SPECIFIER;
const Element_Kind Element::TRY_BLOCK;
const Element_Kind Element::CATCH_BLOCK;
const Element_Kind Element::FINALLY_BLOCK;
const Element_Kind Element::THROW_STATEMENT;
const Element_Kind Element::THROW_SPECIFIER;
const Element_Kind Element::THROW_SPECIFIER_JAVA;
const Element_Kind Element::TEMPLATE;
const Element_Kind Element::GENERIC_ARGUMENT;
const Element_Kind Element::GENERIC_ARGUMENT_LIST;
const Element_Kind Element::TEMPLATE_PARAMETER;
const Element_Kind Element::TEMPLATE_PARAMETER_LIST;
const Element_Kind Element::GENERIC_PARAMETER;
const Element_Kind Element::GENERIC_PARAMETER_LIST;
const Element_Kind Element::TYPEDEF;
const Element_Kind Element::ASM;
const Element_Kind Element::MACRO_CALL;
const Element_Kind Element::SIZEOF_CALL;
const Element_Kind Element::EXTERN;
const Element_Kind Element::NAMESPACE;
const Element_Kind Element::USING_DIRECTIVE;
const Element_Kind Element::DIRECTIVE;
const Element_Kind Element::ATOMIC;
const Element_Kind Element::STATIC_ASSERT_STATEMENT;
const Element_Kind Element::GENERIC_SELECTION;
const Element_Kind Element::GENERIC_SELECTOR;
const Element_Kind Element::GENERIC_ASSOCIATION_LIST;
const Element_Kind Element::GENERIC_ASSOCIATION;
const Element_Kind Element::ALIGNAS;
const Element_Kind Element::DECLTYPE;
const Element_Kind Element::CAPTURE;
const Element_Kind Element::LAMBDA_CAPTURE;
const Element_Kind Element::NOEXCEPT;
const Element_Kind Element::TYPENAME;
const Element_Kind Element::ALIGNOF;
const Element_Kind Element::TYPEID;
const Element_Kind Element::SIZEOF_PACK;
const Element_Kind Element::ENUM_CLASS;
const Element_Kind Element::ENUM_CLASS_DECLARATION;
const Element_Kind Element::REF_QUALIFIER;
const Element_Kind Element::SIGNAL_ACCESS;
const Element_Kind Element::FOREVER_STATEMENT;
const Element_Kind Element::EMIT_STATEMENT;
const Element_Kind Element::CPP_DIRECTIVE;
const Element_Kind Element::CPP_FILENAME;
const Element_Kind Element::FILE;
const Element_Kind Element::NUMBER;
const Element_Kind Element::CPP_NUMBER;
const Element_Kind Element::CPP_LITERAL;
const Element_Kind Element::CPP_MACRO_DEFN;
const Element_Kind Element::CPP_MACRO_VALUE;
const Element_Kind Element::ERROR;
const Element_Kind Element::CPP_ERROR;
const Element_Kind Element::CPP_WARNING;
const Element_Kind Element::CPP_PRAGMA;
const Element_Kind Element::CPP_INCLUDE;
const Element_Kind Element::CPP_DEFINE;
const Element_Kind Element::CPP_UNDEF;
const Element_Kind Element::CPP_LINE;
const Element_Kind Element::CPP_IF;
const Element_Kind Element::CPP_IFDEF;
const Element_Kind Element::CPP_IFNDEF;
const Element_Kind Element::CPP_THEN;
const Element_Kind Element::CPP_ELSE;
const Element_Kind Element::CPP_ELIF;
const Element_Kind Element::CPP_EMPTY;
const Element_Kind Element::CPP_REGION;
const Element_Kind Element::CPP_ENDREGION;
const Element_Kind Element::USING_STMT;
const Element_Kind Element::ESCAPE;
const Element_Kind Element::VALUE;
const Element_Kind Element::CPP_IMPORT;
const Element_Kind Element::CPP_ENDIF;
const Element_Kind Element::MARKER;
const Element_Kind Element::ERROR_PARSE;
const Element_Kind Element::ERROR_MODE;
const Element_Kind Element::IMPLEMENTS;
const Element_Kind Element::EXTENDS;
const Element_Kind Element::IMPORT;
const Element_Kind Element::PACKAGE;
const Element_Kind Element::ASSERT_STATEMENT;
const Element_Kind Element::INTERFACE;
const Element_Kind Element::INTERFACE_DECLARATION;
const Element_Kind Element::SYNCHRONIZED_STATEMENT;
const Element_Kind Element::ANNOTATION;
const Element_Kind Element::STATIC_BLOCK;
const Element_Kind Element::CHECKED_STATEMENT;
const Element_Kind Element::UNCHECKED_STATEMENT;
const Element_Kind Element::ATTRIBUTE;
const Element_Kind Element::TARGET;
const Element_Kind Element::UNSAFE_STATEMENT;
const Element_Kind Element::LOCK_STATEMENT;
const Element_Kind Element::FIXED_STATEMENT;
const Element_Kind Element::TYPEOF;
const Element_Kind Element::USING_STATEMENT;
const Element_Kind Element::FUNCTION_DELEGATE;
const Element_Kind Element::CONSTRAINT;
const Element_Kind Element::LINQ;
const Element_Kind Element::FROM;
const Element_Kind Element::WHERE;
const Element_Kind Element::SELECT;
const Element_Kind Element::LET;
const Element_Kind Element::ORDERBY;
const Element_Kind Element::JOIN;
const Element_Kind Element::GROUP;
const Element_Kind Element::IN;
const Element_Kind Element::ON;
const Element_Kind Element::EQUALS;
const Element_Kind Element::BY;
const Element_Kind Element::INTO;
const Element_Kind Element::EMPTY;
const Element_Kind Element::EMPTY_STMT;
const Element_Kind Element::RECEIVER;
const Element_Kind Element::MESSAGE;
const Element_Kind Element::SELECTOR;
const Element_Kind Element::PROTOCOL_LIST;
const Element_Kind Element::CATEGORY;
const Element_Kind Element::PROTOCOL;
const Element_Kind Element::REQUIRED_DEFAULT;
const Element_Kind Element::REQUIRED;
const Element_Kind Element::OPTIONAL;
const Element_Kind Element::ATTRIBUTE_LIST;
const Element_Kind Element::SYNTHESIZE;
const Element_Kind Element::DYNAMIC;
const Element_Kind Element::ENCODE;
const Element_Kind Element::AUTORELEASEPOOL;
const Element_Kind Element::COMPATIBILITY_ALIAS;
const Element_Kind Element::NIL;
const Element_Kind Element::CLASS_INTERFACE;
const Element_Kind Element::CLASS_IMPLEMENTATION;
const Element_Kind Element::PROTOCOL_DECLARATION;
const Element_Kind Element::CAST;
const Element_Kind Element::CONST_CAST;
const Element_Kind Element::DYNAMIC_CAST;
const Element_Kind Element::REINTERPRET_CAST;
const Element_Kind Element::STATIC_CAST;
const Element_Kind Element::POSITION;
const Element_Kind Element::CUDA_ARGUMENT_LIST;
const Element_Kind Element::OMP_DIRECTIVE;
const Element_Kind Element::OMP_NAME;
const Element_Kind Element::OMP_CLAUSE;
const Element_Kind Element::OMP_ARGUMENT_LIST;
const Element_Kind Element::OMP_ARGUMENT;
const Element_Kind Element::OMP_EXPRESSION;
const Element_Kind Element::END_ELEMENT_TOKEN;
const Element_Kind Element::MAIN;
const Element_Kind Element::BREAK;
const Element_Kind Element::CONTINUE;
const Element_Kind Element::WHILE;
const Element_Kind Element::DO;
const Element_Kind Element::FOR;
const Element_Kind Element::IF;
const Element_Kind Element::GOTO;
const Element_Kind Element::VISUAL_CXX_ASM;
const Element_Kind Element::SIZEOF;
const Element_Kind Element::AUTO;
const Element_Kind Element::REGISTER;
const Element_Kind Element::RESTRICT;
const Element_Kind Element::IMAGINARY;
const Element_Kind Element::NORETURN;
const Element_Kind Element::STATIC_ASSERT;
const Element_Kind Element::CRESTRICT;
const Element_Kind Element::CXX_TRY;
const Element_Kind Element::CXX_CATCH;
const Element_Kind Element::CXX_CLASS;
const Element_Kind Element::CONSTEXPR;
const Element_Kind Element::THREAD_LOCAL;
const Element_Kind Element::NULLPTR;
const Element_Kind Element::VOID;
const Element_Kind Element::RETURN;
const Element_Kind Element::INCLUDE;
const Element_Kind Element::DEFINE;
const Element_Kind Element::ELIF;
const Element_Kind Element::ENDIF;
const Element_Kind Element::ERRORPREC;
const Element_Kind Element::WARNING;
const Element_Kind Element::IFDEF;
const Element_Kind Element::IFNDEF;
const Element_Kind Element::LINE;
const Element_Kind Element::PRAGMA;
const Element_Kind Element::UNDEF;
const Element_Kind Element::INLINE;
const Element_Kind Element::MACRO_TYPE_NAME;
const Element_Kind Element::MACRO_CASE;
const Element_Kind Element::MACRO_LABEL;
const Element_Kind Element::SPECIFIER;
const Element_Kind Element::TRY;
const Element_Kind Element::CATCH;
const Element_Kind Element::THROW;
const Element_Kind Element::THROWS;
const Element_Kind Element::PUBLIC;
const Element_Kind Element::PRIVATE;
const Element_Kind Element::PROTECTED;
const Element_Kind Element::VIRTUAL;
const Element_Kind Element::EXPLICIT;
const Element_Kind Element::FOREVER;
const Element_Kind Element::SIGNAL;
const Element_Kind Element::EMIT;
const Element_Kind Element::NEW;
const Element_Kind Element::DELETE;
const Element_Kind Element::STATIC;
const Element_Kind Element::CONST;
const Element_Kind Element::MUTABLE;
const Element_Kind Element::VOLATILE;
const Element_Kind Element::TRANSIENT;
const Element_Kind Element::FINALLY;
const Element_Kind Element::FINAL;
const Element_Kind Element::ABSTRACT;
const Element_Kind Element::SUPER;
const Element_Kind Element::SYNCHRONIZED;
const Element_Kind Element::NATIVE;
const Element_Kind Element::STRICTFP;
const Element_Kind Element::NULLLITERAL;
const Element_Kind Element::ASSERT;
const Element_Kind Element::FOREACH;
const Element_Kind Element::REF;
const Element_Kind Element::OUT;
const Element_Kind Element::LOCK;
const Element_Kind Element::IS;
const Element_Kind Element::INTERNAL;
const Element_Kind Element::SEALED;
const Element_Kind Element::OVERRIDE;
const Element_Kind Element::IMPLICIT;
const Element_Kind Element::STACKALLOC;
const Element_Kind Element::AS;
const Element_Kind Element::DELEGATE;
const Element_Kind Element::FIXED;
const Element_Kind Element::CHECKED;
const Element_Kind Element::UNCHECKED;
const Element_Kind Element::REGION;
const Element_Kind Element::ENDREGION;
const Element_Kind Element::UNSAFE;
const Element_Kind Element::READONLY;
const Element_Kind Element::GET;
const Element_Kind Element::SET;
const Element_Kind Element::ADD;
const Element_Kind Element::REMOVE;
const Element_Kind Element::YIELD;
const Element_Kind Element::PARTIAL;
const Element_Kind Element::AWAIT;
const Element_Kind Element::ASYNC;
const Element_Kind Element::THIS;
const Element_Kind Element::PARAMS;
const Element_Kind Element::ALIAS;
const Element_Kind Element::ASCENDING;
const Element_Kind Element::DESCENDING;
const Element_Kind Element::ATINTERFACE;
const Element_Kind Element::ATIMPLEMENTATION;
const Element_Kind Element::ATEND;
const Element_Kind Element::ATPROTOCOL;
const Element_Kind Element::ATREQUIRED;
const Element_Kind Element::ATOPTIONAL;
const Element_Kind Element::ATCLASS;
const Element_Kind Element::WEAK;
const Element_Kind Element::STRONG;
const Element_Kind Element::OMP_OMP;
const Element_Kind Element::SPECIAL_CHARS;
const Element_Kind Element::Kind_MIN;
const Element_Kind Element::Kind_MAX;
const int Element::Kind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Element_SmaliKind_descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_enum_descriptors[3];
}
bool Element_SmaliKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Element_SmaliKind Element::INVALID;
const Element_SmaliKind Element::EOR;
const Element_SmaliKind Element::DOWN;
const Element_SmaliKind Element::UP;
const Element_SmaliKind Element::ACCESS_SPEC;
const Element_SmaliKind Element::ANNOTATION_DIRECTIVE;
const Element_SmaliKind Element::ANNOTATION_VISIBILITY;
const Element_SmaliKind Element::ARRAY_DATA_DIRECTIVE;
const Element_SmaliKind Element::ARRAY_TYPE_PREFIX;
const Element_SmaliKind Element::ARROW;
const Element_SmaliKind Element::BOOL_LITERAL;
const Element_SmaliKind Element::BYTE_LITERAL;
const Element_SmaliKind Element::CATCHALL_DIRECTIVE;
const Element_SmaliKind Element::CATCH_DIRECTIVE;
const Element_SmaliKind Element::CHAR_LITERAL;
const Element_SmaliKind Element::CLASS_DESCRIPTOR;
const Element_SmaliKind Element::CLASS_DIRECTIVE;
const Element_SmaliKind Element::CLOSE_BRACE;
const Element_SmaliKind Element::CLOSE_PAREN;
const Element_SmaliKind Element::COLON;
const Element_SmaliKind Element::COMMA;
const Element_SmaliKind Element::DOTDOT;
const Element_SmaliKind Element::DOUBLE_LITERAL;
const Element_SmaliKind Element::DOUBLE_LITERAL_OR_ID;
const Element_SmaliKind Element::END_ANNOTATION_DIRECTIVE;
const Element_SmaliKind Element::END_ARRAY_DATA_DIRECTIVE;
const Element_SmaliKind Element::END_FIELD_DIRECTIVE;
const Element_SmaliKind Element::END_LOCAL_DIRECTIVE;
const Element_SmaliKind Element::END_METHOD_DIRECTIVE;
const Element_SmaliKind Element::END_PACKED_SWITCH_DIRECTIVE;
const Element_SmaliKind Element::END_PARAMETER_DIRECTIVE;
const Element_SmaliKind Element::END_SPARSE_SWITCH_DIRECTIVE;
const Element_SmaliKind Element::END_SUBANNOTATION_DIRECTIVE;
const Element_SmaliKind Element::ENUM_DIRECTIVE;
const Element_SmaliKind Element::EPILOGUE_DIRECTIVE;
const Element_SmaliKind Element::EQUAL;
const Element_SmaliKind Element::FIELD_DIRECTIVE;
const Element_SmaliKind Element::FIELD_OFFSET;
const Element_SmaliKind Element::FLOAT_LITERAL;
const Element_SmaliKind Element::FLOAT_LITERAL_OR_ID;
const Element_SmaliKind Element::IMPLEMENTS_DIRECTIVE;
const Element_SmaliKind Element::INLINE_INDEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT10t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT10x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT10x_ODEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT11n;
const Element_SmaliKind Element::INSTRUCTION_FORMAT11x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT12x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT12x_OR_ID;
const Element_SmaliKind Element::INSTRUCTION_FORMAT20bc;
const Element_SmaliKind Element::INSTRUCTION_FORMAT20t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21c_FIELD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21c_FIELD_ODEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21c_STRING;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21c_TYPE;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21ih;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21lh;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21s;
const Element_SmaliKind Element::INSTRUCTION_FORMAT21t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22b;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22c_FIELD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22c_FIELD_ODEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22c_TYPE;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22cs_FIELD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22s;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22s_OR_ID;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT22x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT23x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT30t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT31c;
const Element_SmaliKind Element::INSTRUCTION_FORMAT31i;
const Element_SmaliKind Element::INSTRUCTION_FORMAT31i_OR_ID;
const Element_SmaliKind Element::INSTRUCTION_FORMAT31t;
const Element_SmaliKind Element::INSTRUCTION_FORMAT32x;
const Element_SmaliKind Element::INSTRUCTION_FORMAT35c_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT35c_METHOD_ODEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT35c_TYPE;
const Element_SmaliKind Element::INSTRUCTION_FORMAT35mi_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT35ms_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT3rc_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT3rc_METHOD_ODEX;
const Element_SmaliKind Element::INSTRUCTION_FORMAT3rc_TYPE;
const Element_SmaliKind Element::INSTRUCTION_FORMAT3rmi_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT3rms_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT45cc_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT4rcc_METHOD;
const Element_SmaliKind Element::INSTRUCTION_FORMAT51l;
const Element_SmaliKind Element::INTEGER_LITERAL;
const Element_SmaliKind Element::INVALID_TOKEN;
const Element_SmaliKind Element::I_ACCESS_LIST;
const Element_SmaliKind Element::I_ANNOTATION;
const Element_SmaliKind Element::I_ANNOTATIONS;
const Element_SmaliKind Element::I_ANNOTATION_ELEMENT;
const Element_SmaliKind Element::I_ARRAY_ELEMENTS;
const Element_SmaliKind Element::I_ARRAY_ELEMENT_SIZE;
const Element_SmaliKind Element::I_CATCH;
const Element_SmaliKind Element::I_CATCHALL;
const Element_SmaliKind Element::I_CATCHES;
const Element_SmaliKind Element::I_CLASS_DEF;
const Element_SmaliKind Element::I_ENCODED_ARRAY;
const Element_SmaliKind Element::I_ENCODED_ENUM;
const Element_SmaliKind Element::I_ENCODED_FIELD;
const Element_SmaliKind Element::I_ENCODED_METHOD;
const Element_SmaliKind Element::I_END_LOCAL;
const Element_SmaliKind Element::I_EPILOGUE;
const Element_SmaliKind Element::I_FIELD;
const Element_SmaliKind Element::I_FIELDS;
const Element_SmaliKind Element::I_FIELD_INITIAL_VALUE;
const Element_SmaliKind Element::I_FIELD_TYPE;
const Element_SmaliKind Element::I_IMPLEMENTS;
const Element_SmaliKind Element::I_LABEL;
const Element_SmaliKind Element::I_LINE;
const Element_SmaliKind Element::I_LOCAL;
const Element_SmaliKind Element::I_LOCALS;
const Element_SmaliKind Element::I_METHOD;
const Element_SmaliKind Element::I_METHODS;
const Element_SmaliKind Element::I_METHOD_PROTOTYPE;
const Element_SmaliKind Element::I_METHOD_RETURN_TYPE;
const Element_SmaliKind Element::I_ORDERED_METHOD_ITEMS;
const Element_SmaliKind Element::I_PACKED_SWITCH_ELEMENTS;
const Element_SmaliKind Element::I_PACKED_SWITCH_START_KEY;
const Element_SmaliKind Element::I_PARAMETER;
const Element_SmaliKind Element::I_PARAMETERS;
const Element_SmaliKind Element::I_PARAMETER_NOT_SPECIFIED;
const Element_SmaliKind Element::I_PROLOGUE;
const Element_SmaliKind Element::I_REGISTERS;
const Element_SmaliKind Element::I_REGISTER_LIST;
const Element_SmaliKind Element::I_REGISTER_RANGE;
const Element_SmaliKind Element::I_RESTART_LOCAL;
const Element_SmaliKind Element::I_SOURCE;
const Element_SmaliKind Element::I_SPARSE_SWITCH_ELEMENTS;
const Element_SmaliKind Element::I_STATEMENT_ARRAY_DATA;
const Element_SmaliKind Element::I_STATEMENT_FORMAT10t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT10x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT11n;
const Element_SmaliKind Element::I_STATEMENT_FORMAT11x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT12x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT20bc;
const Element_SmaliKind Element::I_STATEMENT_FORMAT20t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21c_FIELD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21c_STRING;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21c_TYPE;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21ih;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21lh;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21s;
const Element_SmaliKind Element::I_STATEMENT_FORMAT21t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22b;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22c_FIELD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22c_TYPE;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22s;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT22x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT23x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT30t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT31c;
const Element_SmaliKind Element::I_STATEMENT_FORMAT31i;
const Element_SmaliKind Element::I_STATEMENT_FORMAT31t;
const Element_SmaliKind Element::I_STATEMENT_FORMAT32x;
const Element_SmaliKind Element::I_STATEMENT_FORMAT35c_METHOD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT35c_TYPE;
const Element_SmaliKind Element::I_STATEMENT_FORMAT3rc_METHOD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT3rc_TYPE;
const Element_SmaliKind Element::I_STATEMENT_FORMAT45cc_METHOD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT4rcc_METHOD;
const Element_SmaliKind Element::I_STATEMENT_FORMAT51l;
const Element_SmaliKind Element::I_STATEMENT_PACKED_SWITCH;
const Element_SmaliKind Element::I_STATEMENT_SPARSE_SWITCH;
const Element_SmaliKind Element::I_SUBANNOTATION;
const Element_SmaliKind Element::I_SUPER;
const Element_SmaliKind Element::LINE_COMMENT;
const Element_SmaliKind Element::LINE_DIRECTIVE;
const Element_SmaliKind Element::LOCALS_DIRECTIVE;
const Element_SmaliKind Element::LOCAL_DIRECTIVE;
const Element_SmaliKind Element::LONG_LITERAL;
const Element_SmaliKind Element::MEMBER_NAME;
const Element_SmaliKind Element::METHOD_DIRECTIVE;
const Element_SmaliKind Element::NEGATIVE_INTEGER_LITERAL;
const Element_SmaliKind Element::NULL_LITERAL;
const Element_SmaliKind Element::OPEN_BRACE;
const Element_SmaliKind Element::OPEN_PAREN;
const Element_SmaliKind Element::PACKED_SWITCH_DIRECTIVE;
const Element_SmaliKind Element::PARAMETER_DIRECTIVE;
const Element_SmaliKind Element::PARAM_LIST_OR_ID_PRIMITIVE_TYPE;
const Element_SmaliKind Element::POSITIVE_INTEGER_LITERAL;
const Element_SmaliKind Element::PRIMITIVE_TYPE;
const Element_SmaliKind Element::PROLOGUE_DIRECTIVE;
const Element_SmaliKind Element::SMALI_REGISTER;
const Element_SmaliKind Element::REGISTERS_DIRECTIVE;
const Element_SmaliKind Element::RESTART_LOCAL_DIRECTIVE;
const Element_SmaliKind Element::SHORT_LITERAL;
const Element_SmaliKind Element::SIMPLE_NAME;
const Element_SmaliKind Element::SOURCE_DIRECTIVE;
const Element_SmaliKind Element::SPARSE_SWITCH_DIRECTIVE;
const Element_SmaliKind Element::STRING_LITERAL;
const Element_SmaliKind Element::SUBANNOTATION_DIRECTIVE;
const Element_SmaliKind Element::SUPER_DIRECTIVE;
const Element_SmaliKind Element::VERIFICATION_ERROR_TYPE;
const Element_SmaliKind Element::VOID_TYPE;
const Element_SmaliKind Element::VTABLE_INDEX;
const Element_SmaliKind Element::WHITE_SPACE;
const Element_SmaliKind Element::SmaliKind_MIN;
const Element_SmaliKind Element::SmaliKind_MAX;
const int Element::SmaliKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Delta_Diff_DeltaType_descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_enum_descriptors[4];
}
bool Delta_Diff_DeltaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Delta_Diff_DeltaType Delta_Diff::MATCH;
const Delta_Diff_DeltaType Delta_Diff::ADD;
const Delta_Diff_DeltaType Delta_Diff::DEL;
const Delta_Diff_DeltaType Delta_Diff::MOVE;
const Delta_Diff_DeltaType Delta_Diff::UPDATE;
const Delta_Diff_DeltaType Delta_Diff::DeltaType_MIN;
const Delta_Diff_DeltaType Delta_Diff::DeltaType_MAX;
const int Delta_Diff::DeltaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Element_Unit::kFilenameFieldNumber;
const int Element_Unit::kRevisionFieldNumber;
const int Element_Unit::kLanguageFieldNumber;
const int Element_Unit::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Element_Unit::Element_Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Element.Unit)
}
Element_Unit::Element_Unit(const Element_Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.revision().size() > 0) {
    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  ::memcpy(&language_, &from.language_,
    reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&language_) + sizeof(item_));
  // @@protoc_insertion_point(copy_constructor:fast.Element.Unit)
}

void Element_Unit::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_, 0, reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&language_) + sizeof(item_));
  _cached_size_ = 0;
}

Element_Unit::~Element_Unit() {
  // @@protoc_insertion_point(destructor:fast.Element.Unit)
  SharedDtor();
}

void Element_Unit::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Element_Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element_Unit::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Element_Unit& Element_Unit::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Element_Unit* Element_Unit::New(::google::protobuf::Arena* arena) const {
  Element_Unit* n = new Element_Unit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Element_Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Element.Unit)
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_, 0, reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&language_) + sizeof(item_));
}

bool Element_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Element.Unit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Element.Unit.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string revision = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_revision()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->revision().data(), this->revision().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Element.Unit.revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Element.Unit.LanguageType language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_language(static_cast< ::fast::Element_Unit_LanguageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Element.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Element.Unit)
  return false;
#undef DO_
}

void Element_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Element.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.Unit.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // string revision = 2;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.Unit.revision");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->revision(), output);
  }

  // .fast.Element.Unit.LanguageType language = 3;
  if (this->language() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->language(), output);
  }

  // int32 item = 4;
  if (this->item() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Element.Unit)
}

::google::protobuf::uint8* Element_Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Element.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.Unit.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // string revision = 2;
  if (this->revision().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->revision().data(), this->revision().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.Unit.revision");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->revision(), target);
  }

  // .fast.Element.Unit.LanguageType language = 3;
  if (this->language() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->language(), target);
  }

  // int32 item = 4;
  if (this->item() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Element.Unit)
  return target;
}

size_t Element_Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Element.Unit)
  size_t total_size = 0;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string revision = 2;
  if (this->revision().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->revision());
  }

  // .fast.Element.Unit.LanguageType language = 3;
  if (this->language() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
  }

  // int32 item = 4;
  if (this->item() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element_Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Element.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Element_Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Element_Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Element.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Element.Unit)
    MergeFrom(*source);
  }
}

void Element_Unit::MergeFrom(const Element_Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Element.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.revision().size() > 0) {

    revision_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.revision_);
  }
  if (from.language() != 0) {
    set_language(from.language());
  }
  if (from.item() != 0) {
    set_item(from.item());
  }
}

void Element_Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Element.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element_Unit::CopyFrom(const Element_Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Element.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element_Unit::IsInitialized() const {
  return true;
}

void Element_Unit::Swap(Element_Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Element_Unit::InternalSwap(Element_Unit* other) {
  filename_.Swap(&other->filename_);
  revision_.Swap(&other->revision_);
  std::swap(language_, other->language_);
  std::swap(item_, other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Element_Unit::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Element_Unit

// string filename = 1;
void Element_Unit::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Element_Unit::filename() const {
  // @@protoc_insertion_point(field_get:fast.Element.Unit.filename)
  return filename_.GetNoArena();
}
void Element_Unit::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Element.Unit.filename)
}
#if LANG_CXX11
void Element_Unit::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Element.Unit.filename)
}
#endif
void Element_Unit::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Element.Unit.filename)
}
void Element_Unit::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Element.Unit.filename)
}
::std::string* Element_Unit::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:fast.Element.Unit.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Element_Unit::release_filename() {
  // @@protoc_insertion_point(field_release:fast.Element.Unit.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Element_Unit::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:fast.Element.Unit.filename)
}

// string revision = 2;
void Element_Unit::clear_revision() {
  revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Element_Unit::revision() const {
  // @@protoc_insertion_point(field_get:fast.Element.Unit.revision)
  return revision_.GetNoArena();
}
void Element_Unit::set_revision(const ::std::string& value) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Element.Unit.revision)
}
#if LANG_CXX11
void Element_Unit::set_revision(::std::string&& value) {
  
  revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Element.Unit.revision)
}
#endif
void Element_Unit::set_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Element.Unit.revision)
}
void Element_Unit::set_revision(const char* value, size_t size) {
  
  revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Element.Unit.revision)
}
::std::string* Element_Unit::mutable_revision() {
  
  // @@protoc_insertion_point(field_mutable:fast.Element.Unit.revision)
  return revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Element_Unit::release_revision() {
  // @@protoc_insertion_point(field_release:fast.Element.Unit.revision)
  
  return revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Element_Unit::set_allocated_revision(::std::string* revision) {
  if (revision != NULL) {
    
  } else {
    
  }
  revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), revision);
  // @@protoc_insertion_point(field_set_allocated:fast.Element.Unit.revision)
}

// .fast.Element.Unit.LanguageType language = 3;
void Element_Unit::clear_language() {
  language_ = 0;
}
::fast::Element_Unit_LanguageType Element_Unit::language() const {
  // @@protoc_insertion_point(field_get:fast.Element.Unit.language)
  return static_cast< ::fast::Element_Unit_LanguageType >(language_);
}
void Element_Unit::set_language(::fast::Element_Unit_LanguageType value) {
  
  language_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.Unit.language)
}

// int32 item = 4;
void Element_Unit::clear_item() {
  item_ = 0;
}
::google::protobuf::int32 Element_Unit::item() const {
  // @@protoc_insertion_point(field_get:fast.Element.Unit.item)
  return item_;
}
void Element_Unit::set_item(::google::protobuf::int32 value) {
  
  item_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.Unit.item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Element_Literal::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Element_Literal::Element_Literal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Element.Literal)
}
Element_Literal::Element_Literal(const Element_Literal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fast.Element.Literal)
}

void Element_Literal::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

Element_Literal::~Element_Literal() {
  // @@protoc_insertion_point(destructor:fast.Element.Literal)
  SharedDtor();
}

void Element_Literal::SharedDtor() {
}

void Element_Literal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element_Literal::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Element_Literal& Element_Literal::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Element_Literal* Element_Literal::New(::google::protobuf::Arena* arena) const {
  Element_Literal* n = new Element_Literal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Element_Literal::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Element.Literal)
  type_ = 0;
}

bool Element_Literal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Element.Literal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fast.Element.Literal.LiteralType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::fast::Element_Literal_LiteralType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Element.Literal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Element.Literal)
  return false;
#undef DO_
}

void Element_Literal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Element.Literal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Element.Literal.LiteralType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Element.Literal)
}

::google::protobuf::uint8* Element_Literal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Element.Literal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Element.Literal.LiteralType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Element.Literal)
  return target;
}

size_t Element_Literal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Element.Literal)
  size_t total_size = 0;

  // .fast.Element.Literal.LiteralType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element_Literal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Element.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  const Element_Literal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Element_Literal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Element.Literal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Element.Literal)
    MergeFrom(*source);
  }
}

void Element_Literal::MergeFrom(const Element_Literal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Element.Literal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Element_Literal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Element.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element_Literal::CopyFrom(const Element_Literal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Element.Literal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element_Literal::IsInitialized() const {
  return true;
}

void Element_Literal::Swap(Element_Literal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Element_Literal::InternalSwap(Element_Literal* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Element_Literal::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Element_Literal

// .fast.Element.Literal.LiteralType type = 1;
void Element_Literal::clear_type() {
  type_ = 0;
}
::fast::Element_Literal_LiteralType Element_Literal::type() const {
  // @@protoc_insertion_point(field_get:fast.Element.Literal.type)
  return static_cast< ::fast::Element_Literal_LiteralType >(type_);
}
void Element_Literal::set_type(::fast::Element_Literal_LiteralType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.Literal.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Element::kKindFieldNumber;
const int Element::kTextFieldNumber;
const int Element::kTailFieldNumber;
const int Element::kPosFieldNumber;
const int Element::kLengthFieldNumber;
const int Element::kChildFieldNumber;
const int Element::kUnitFieldNumber;
const int Element::kLiteralFieldNumber;
const int Element::kLineFieldNumber;
const int Element::kColumnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Element::Element()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Element)
}
Element::Element(const Element& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_(from.child_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  tail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tail().size() > 0) {
    tail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tail_);
  }
  ::memcpy(&kind_, &from.kind_,
    reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&kind_) + sizeof(column_));
  clear_has_extra();
  switch (from.extra_case()) {
    case kUnit: {
      mutable_unit()->::fast::Element_Unit::MergeFrom(from.unit());
      break;
    }
    case kLiteral: {
      mutable_literal()->::fast::Element_Literal::MergeFrom(from.literal());
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fast.Element)
}

void Element::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tail_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&kind_) + sizeof(column_));
  clear_has_extra();
  _cached_size_ = 0;
}

Element::~Element() {
  // @@protoc_insertion_point(destructor:fast.Element)
  SharedDtor();
}

void Element::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tail_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_extra()) {
    clear_extra();
  }
}

void Element::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Element::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Element& Element::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Element* Element::New(::google::protobuf::Arena* arena) const {
  Element* n = new Element;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Element::clear_extra() {
// @@protoc_insertion_point(one_of_clear_start:fast.Element)
  switch (extra_case()) {
    case kUnit: {
      delete extra_.unit_;
      break;
    }
    case kLiteral: {
      delete extra_.literal_;
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXTRA_NOT_SET;
}


void Element::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Element)
  child_.Clear();
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&kind_, 0, reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&kind_) + sizeof(column_));
  clear_extra();
}

bool Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Element)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fast.Element.Kind kind = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::fast::Element_Kind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Element.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tail()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tail().data(), this->tail().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Element.tail"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fast.Element child = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Element.Unit unit = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Element.Literal literal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_literal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 line = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 column = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Element)
  return false;
#undef DO_
}

void Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Element.Kind kind = 1;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // string tail = 3;
  if (this->tail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tail().data(), this->tail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.tail");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tail(), output);
  }

  // int32 pos = 4;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  // int32 length = 5;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->length(), output);
  }

  // repeated .fast.Element child = 6;
  for (unsigned int i = 0, n = this->child_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->child(i), output);
  }

  // .fast.Element.Unit unit = 7;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *extra_.unit_, output);
  }

  // .fast.Element.Literal literal = 8;
  if (has_literal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *extra_.literal_, output);
  }

  // int32 line = 9;
  if (this->line() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->line(), output);
  }

  // int32 column = 10;
  if (this->column() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->column(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Element)
}

::google::protobuf::uint8* Element::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Element.Kind kind = 1;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // string tail = 3;
  if (this->tail().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tail().data(), this->tail().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Element.tail");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tail(), target);
  }

  // int32 pos = 4;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  // int32 length = 5;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->length(), target);
  }

  // repeated .fast.Element child = 6;
  for (unsigned int i = 0, n = this->child_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->child(i), deterministic, target);
  }

  // .fast.Element.Unit unit = 7;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *extra_.unit_, deterministic, target);
  }

  // .fast.Element.Literal literal = 8;
  if (has_literal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *extra_.literal_, deterministic, target);
  }

  // int32 line = 9;
  if (this->line() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->line(), target);
  }

  // int32 column = 10;
  if (this->column() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->column(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Element)
  return target;
}

size_t Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Element)
  size_t total_size = 0;

  // repeated .fast.Element child = 6;
  {
    unsigned int count = this->child_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child(i));
    }
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // string tail = 3;
  if (this->tail().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tail());
  }

  // .fast.Element.Kind kind = 1;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // int32 pos = 4;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pos());
  }

  // int32 length = 5;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // int32 line = 9;
  if (this->line() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line());
  }

  // int32 column = 10;
  if (this->column() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->column());
  }

  switch (extra_case()) {
    // .fast.Element.Unit unit = 7;
    case kUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *extra_.unit_);
      break;
    }
    // .fast.Element.Literal literal = 8;
    case kLiteral: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *extra_.literal_);
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Element::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const Element* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Element>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Element)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Element)
    MergeFrom(*source);
  }
}

void Element::MergeFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.tail().size() > 0) {

    tail_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tail_);
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.line() != 0) {
    set_line(from.line());
  }
  if (from.column() != 0) {
    set_column(from.column());
  }
  switch (from.extra_case()) {
    case kUnit: {
      mutable_unit()->::fast::Element_Unit::MergeFrom(from.unit());
      break;
    }
    case kLiteral: {
      mutable_literal()->::fast::Element_Literal::MergeFrom(from.literal());
      break;
    }
    case EXTRA_NOT_SET: {
      break;
    }
  }
}

void Element::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element::CopyFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {
  return true;
}

void Element::Swap(Element* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Element::InternalSwap(Element* other) {
  child_.InternalSwap(&other->child_);
  text_.Swap(&other->text_);
  tail_.Swap(&other->tail_);
  std::swap(kind_, other->kind_);
  std::swap(pos_, other->pos_);
  std::swap(length_, other->length_);
  std::swap(line_, other->line_);
  std::swap(column_, other->column_);
  std::swap(extra_, other->extra_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Element::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Element

// .fast.Element.Kind kind = 1;
void Element::clear_kind() {
  kind_ = 0;
}
::fast::Element_Kind Element::kind() const {
  // @@protoc_insertion_point(field_get:fast.Element.kind)
  return static_cast< ::fast::Element_Kind >(kind_);
}
void Element::set_kind(::fast::Element_Kind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.kind)
}

// string text = 2;
void Element::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Element::text() const {
  // @@protoc_insertion_point(field_get:fast.Element.text)
  return text_.GetNoArena();
}
void Element::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Element.text)
}
#if LANG_CXX11
void Element::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Element.text)
}
#endif
void Element::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Element.text)
}
void Element::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Element.text)
}
::std::string* Element::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:fast.Element.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Element::release_text() {
  // @@protoc_insertion_point(field_release:fast.Element.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Element::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:fast.Element.text)
}

// string tail = 3;
void Element::clear_tail() {
  tail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Element::tail() const {
  // @@protoc_insertion_point(field_get:fast.Element.tail)
  return tail_.GetNoArena();
}
void Element::set_tail(const ::std::string& value) {
  
  tail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Element.tail)
}
#if LANG_CXX11
void Element::set_tail(::std::string&& value) {
  
  tail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Element.tail)
}
#endif
void Element::set_tail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Element.tail)
}
void Element::set_tail(const char* value, size_t size) {
  
  tail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Element.tail)
}
::std::string* Element::mutable_tail() {
  
  // @@protoc_insertion_point(field_mutable:fast.Element.tail)
  return tail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Element::release_tail() {
  // @@protoc_insertion_point(field_release:fast.Element.tail)
  
  return tail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Element::set_allocated_tail(::std::string* tail) {
  if (tail != NULL) {
    
  } else {
    
  }
  tail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tail);
  // @@protoc_insertion_point(field_set_allocated:fast.Element.tail)
}

// int32 pos = 4;
void Element::clear_pos() {
  pos_ = 0;
}
::google::protobuf::int32 Element::pos() const {
  // @@protoc_insertion_point(field_get:fast.Element.pos)
  return pos_;
}
void Element::set_pos(::google::protobuf::int32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.pos)
}

// int32 length = 5;
void Element::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 Element::length() const {
  // @@protoc_insertion_point(field_get:fast.Element.length)
  return length_;
}
void Element::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.length)
}

// repeated .fast.Element child = 6;
int Element::child_size() const {
  return child_.size();
}
void Element::clear_child() {
  child_.Clear();
}
const ::fast::Element& Element::child(int index) const {
  // @@protoc_insertion_point(field_get:fast.Element.child)
  return child_.Get(index);
}
::fast::Element* Element::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:fast.Element.child)
  return child_.Mutable(index);
}
::fast::Element* Element::add_child() {
  // @@protoc_insertion_point(field_add:fast.Element.child)
  return child_.Add();
}
::google::protobuf::RepeatedPtrField< ::fast::Element >*
Element::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:fast.Element.child)
  return &child_;
}
const ::google::protobuf::RepeatedPtrField< ::fast::Element >&
Element::child() const {
  // @@protoc_insertion_point(field_list:fast.Element.child)
  return child_;
}

// .fast.Element.Unit unit = 7;
bool Element::has_unit() const {
  return extra_case() == kUnit;
}
void Element::set_has_unit() {
  _oneof_case_[0] = kUnit;
}
void Element::clear_unit() {
  if (has_unit()) {
    delete extra_.unit_;
    clear_has_extra();
  }
}
 const ::fast::Element_Unit& Element::unit() const {
  // @@protoc_insertion_point(field_get:fast.Element.unit)
  return has_unit()
      ? *extra_.unit_
      : ::fast::Element_Unit::default_instance();
}
::fast::Element_Unit* Element::mutable_unit() {
  if (!has_unit()) {
    clear_extra();
    set_has_unit();
    extra_.unit_ = new ::fast::Element_Unit;
  }
  // @@protoc_insertion_point(field_mutable:fast.Element.unit)
  return extra_.unit_;
}
::fast::Element_Unit* Element::release_unit() {
  // @@protoc_insertion_point(field_release:fast.Element.unit)
  if (has_unit()) {
    clear_has_extra();
    ::fast::Element_Unit* temp = extra_.unit_;
    extra_.unit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Element::set_allocated_unit(::fast::Element_Unit* unit) {
  clear_extra();
  if (unit) {
    set_has_unit();
    extra_.unit_ = unit;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Element.unit)
}

// .fast.Element.Literal literal = 8;
bool Element::has_literal() const {
  return extra_case() == kLiteral;
}
void Element::set_has_literal() {
  _oneof_case_[0] = kLiteral;
}
void Element::clear_literal() {
  if (has_literal()) {
    delete extra_.literal_;
    clear_has_extra();
  }
}
 const ::fast::Element_Literal& Element::literal() const {
  // @@protoc_insertion_point(field_get:fast.Element.literal)
  return has_literal()
      ? *extra_.literal_
      : ::fast::Element_Literal::default_instance();
}
::fast::Element_Literal* Element::mutable_literal() {
  if (!has_literal()) {
    clear_extra();
    set_has_literal();
    extra_.literal_ = new ::fast::Element_Literal;
  }
  // @@protoc_insertion_point(field_mutable:fast.Element.literal)
  return extra_.literal_;
}
::fast::Element_Literal* Element::release_literal() {
  // @@protoc_insertion_point(field_release:fast.Element.literal)
  if (has_literal()) {
    clear_has_extra();
    ::fast::Element_Literal* temp = extra_.literal_;
    extra_.literal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Element::set_allocated_literal(::fast::Element_Literal* literal) {
  clear_extra();
  if (literal) {
    set_has_literal();
    extra_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Element.literal)
}

// int32 line = 9;
void Element::clear_line() {
  line_ = 0;
}
::google::protobuf::int32 Element::line() const {
  // @@protoc_insertion_point(field_get:fast.Element.line)
  return line_;
}
void Element::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.line)
}

// int32 column = 10;
void Element::clear_column() {
  column_ = 0;
}
::google::protobuf::int32 Element::column() const {
  // @@protoc_insertion_point(field_get:fast.Element.column)
  return column_;
}
void Element::set_column(::google::protobuf::int32 value) {
  
  column_ = value;
  // @@protoc_insertion_point(field_set:fast.Element.column)
}

bool Element::has_extra() const {
  return extra_case() != EXTRA_NOT_SET;
}
void Element::clear_has_extra() {
  _oneof_case_[0] = EXTRA_NOT_SET;
}
Element::ExtraCase Element::extra_case() const {
  return Element::ExtraCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff_Match::kSrcFieldNumber;
const int Delta_Diff_Match::kDstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff_Match::Delta_Diff_Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff.Match)
}
Delta_Diff_Match::Delta_Diff_Match(const Delta_Diff_Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_, &from.src_,
    reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&src_) + sizeof(dst_));
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff.Match)
}

void Delta_Diff_Match::SharedCtor() {
  ::memset(&src_, 0, reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&src_) + sizeof(dst_));
  _cached_size_ = 0;
}

Delta_Diff_Match::~Delta_Diff_Match() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff.Match)
  SharedDtor();
}

void Delta_Diff_Match::SharedDtor() {
}

void Delta_Diff_Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff_Match::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff_Match& Delta_Diff_Match::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff_Match* Delta_Diff_Match::New(::google::protobuf::Arena* arena) const {
  Delta_Diff_Match* n = new Delta_Diff_Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff_Match::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff.Match)
  ::memset(&src_, 0, reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&src_) + sizeof(dst_));
}

bool Delta_Diff_Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff.Match)
  return false;
#undef DO_
}

void Delta_Diff_Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff.Match)
}

::google::protobuf::uint8* Delta_Diff_Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff.Match)
  return target;
}

size_t Delta_Diff_Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff.Match)
  size_t total_size = 0;

  // int32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff_Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff_Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff_Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff.Match)
    MergeFrom(*source);
  }
}

void Delta_Diff_Match::MergeFrom(const Delta_Diff_Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src() != 0) {
    set_src(from.src());
  }
  if (from.dst() != 0) {
    set_dst(from.dst());
  }
}

void Delta_Diff_Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff_Match::CopyFrom(const Delta_Diff_Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff_Match::IsInitialized() const {
  return true;
}

void Delta_Diff_Match::Swap(Delta_Diff_Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff_Match::InternalSwap(Delta_Diff_Match* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff_Match::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff_Match

// int32 src = 1;
void Delta_Diff_Match::clear_src() {
  src_ = 0;
}
::google::protobuf::int32 Delta_Diff_Match::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Match.src)
  return src_;
}
void Delta_Diff_Match::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Match.src)
}

// int32 dst = 2;
void Delta_Diff_Match::clear_dst() {
  dst_ = 0;
}
::google::protobuf::int32 Delta_Diff_Match::dst() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Match.dst)
  return dst_;
}
void Delta_Diff_Match::set_dst(::google::protobuf::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Match.dst)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff_Add::kSrcFieldNumber;
const int Delta_Diff_Add::kDstFieldNumber;
const int Delta_Diff_Add::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff_Add::Delta_Diff_Add()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff.Add)
}
Delta_Diff_Add::Delta_Diff_Add(const Delta_Diff_Add& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_, &from.src_,
    reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff.Add)
}

void Delta_Diff_Add::SharedCtor() {
  ::memset(&src_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
  _cached_size_ = 0;
}

Delta_Diff_Add::~Delta_Diff_Add() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff.Add)
  SharedDtor();
}

void Delta_Diff_Add::SharedDtor() {
}

void Delta_Diff_Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff_Add::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff_Add& Delta_Diff_Add::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff_Add* Delta_Diff_Add::New(::google::protobuf::Arena* arena) const {
  Delta_Diff_Add* n = new Delta_Diff_Add;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff_Add::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff.Add)
  ::memset(&src_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
}

bool Delta_Diff_Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff.Add)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff.Add)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff.Add)
  return false;
#undef DO_
}

void Delta_Diff_Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff.Add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // int32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff.Add)
}

::google::protobuf::uint8* Delta_Diff_Add::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff.Add)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // int32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff.Add)
  return target;
}

size_t Delta_Diff_Add::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff.Add)
  size_t total_size = 0;

  // int32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst());
  }

  // int32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff_Add::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff.Add)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff_Add* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff_Add>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff.Add)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff.Add)
    MergeFrom(*source);
  }
}

void Delta_Diff_Add::MergeFrom(const Delta_Diff_Add& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff.Add)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src() != 0) {
    set_src(from.src());
  }
  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void Delta_Diff_Add::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff.Add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff_Add::CopyFrom(const Delta_Diff_Add& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff.Add)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff_Add::IsInitialized() const {
  return true;
}

void Delta_Diff_Add::Swap(Delta_Diff_Add* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff_Add::InternalSwap(Delta_Diff_Add* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(position_, other->position_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff_Add::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff_Add

// int32 src = 1;
void Delta_Diff_Add::clear_src() {
  src_ = 0;
}
::google::protobuf::int32 Delta_Diff_Add::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Add.src)
  return src_;
}
void Delta_Diff_Add::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Add.src)
}

// int32 dst = 2;
void Delta_Diff_Add::clear_dst() {
  dst_ = 0;
}
::google::protobuf::int32 Delta_Diff_Add::dst() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Add.dst)
  return dst_;
}
void Delta_Diff_Add::set_dst(::google::protobuf::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Add.dst)
}

// int32 position = 3;
void Delta_Diff_Add::clear_position() {
  position_ = 0;
}
::google::protobuf::int32 Delta_Diff_Add::position() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Add.position)
  return position_;
}
void Delta_Diff_Add::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Add.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff_Del::kSrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff_Del::Delta_Diff_Del()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff.Del)
}
Delta_Diff_Del::Delta_Diff_Del(const Delta_Diff_Del& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_ = from.src_;
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff.Del)
}

void Delta_Diff_Del::SharedCtor() {
  src_ = 0;
  _cached_size_ = 0;
}

Delta_Diff_Del::~Delta_Diff_Del() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff.Del)
  SharedDtor();
}

void Delta_Diff_Del::SharedDtor() {
}

void Delta_Diff_Del::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff_Del::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff_Del& Delta_Diff_Del::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff_Del* Delta_Diff_Del::New(::google::protobuf::Arena* arena) const {
  Delta_Diff_Del* n = new Delta_Diff_Del;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff_Del::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff.Del)
  src_ = 0;
}

bool Delta_Diff_Del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff.Del)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff.Del)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff.Del)
  return false;
#undef DO_
}

void Delta_Diff_Del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff.Del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff.Del)
}

::google::protobuf::uint8* Delta_Diff_Del::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff.Del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff.Del)
  return target;
}

size_t Delta_Diff_Del::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff.Del)
  size_t total_size = 0;

  // int32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff_Del::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff.Del)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff_Del* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff_Del>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff.Del)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff.Del)
    MergeFrom(*source);
  }
}

void Delta_Diff_Del::MergeFrom(const Delta_Diff_Del& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff.Del)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src() != 0) {
    set_src(from.src());
  }
}

void Delta_Diff_Del::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff.Del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff_Del::CopyFrom(const Delta_Diff_Del& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff.Del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff_Del::IsInitialized() const {
  return true;
}

void Delta_Diff_Del::Swap(Delta_Diff_Del* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff_Del::InternalSwap(Delta_Diff_Del* other) {
  std::swap(src_, other->src_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff_Del::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff_Del

// int32 src = 1;
void Delta_Diff_Del::clear_src() {
  src_ = 0;
}
::google::protobuf::int32 Delta_Diff_Del::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Del.src)
  return src_;
}
void Delta_Diff_Del::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Del.src)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff_Move::kSrcFieldNumber;
const int Delta_Diff_Move::kDstFieldNumber;
const int Delta_Diff_Move::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff_Move::Delta_Diff_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff.Move)
}
Delta_Diff_Move::Delta_Diff_Move(const Delta_Diff_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&src_, &from.src_,
    reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff.Move)
}

void Delta_Diff_Move::SharedCtor() {
  ::memset(&src_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
  _cached_size_ = 0;
}

Delta_Diff_Move::~Delta_Diff_Move() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff.Move)
  SharedDtor();
}

void Delta_Diff_Move::SharedDtor() {
}

void Delta_Diff_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff_Move::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff_Move& Delta_Diff_Move::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff_Move* Delta_Diff_Move::New(::google::protobuf::Arena* arena) const {
  Delta_Diff_Move* n = new Delta_Diff_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff.Move)
  ::memset(&src_, 0, reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&src_) + sizeof(position_));
}

bool Delta_Diff_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff.Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff.Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff.Move)
  return false;
#undef DO_
}

void Delta_Diff_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff.Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // int32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff.Move)
}

::google::protobuf::uint8* Delta_Diff_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff.Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // int32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff.Move)
  return target;
}

size_t Delta_Diff_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff.Move)
  size_t total_size = 0;

  // int32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  // int32 dst = 2;
  if (this->dst() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dst());
  }

  // int32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff.Move)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff.Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff.Move)
    MergeFrom(*source);
  }
}

void Delta_Diff_Move::MergeFrom(const Delta_Diff_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff.Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.src() != 0) {
    set_src(from.src());
  }
  if (from.dst() != 0) {
    set_dst(from.dst());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
}

void Delta_Diff_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff_Move::CopyFrom(const Delta_Diff_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff_Move::IsInitialized() const {
  return true;
}

void Delta_Diff_Move::Swap(Delta_Diff_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff_Move::InternalSwap(Delta_Diff_Move* other) {
  std::swap(src_, other->src_);
  std::swap(dst_, other->dst_);
  std::swap(position_, other->position_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff_Move::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff_Move

// int32 src = 1;
void Delta_Diff_Move::clear_src() {
  src_ = 0;
}
::google::protobuf::int32 Delta_Diff_Move::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Move.src)
  return src_;
}
void Delta_Diff_Move::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Move.src)
}

// int32 dst = 2;
void Delta_Diff_Move::clear_dst() {
  dst_ = 0;
}
::google::protobuf::int32 Delta_Diff_Move::dst() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Move.dst)
  return dst_;
}
void Delta_Diff_Move::set_dst(::google::protobuf::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Move.dst)
}

// int32 position = 3;
void Delta_Diff_Move::clear_position() {
  position_ = 0;
}
::google::protobuf::int32 Delta_Diff_Move::position() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Move.position)
  return position_;
}
void Delta_Diff_Move::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Move.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff_Update::kSrcFieldNumber;
const int Delta_Diff_Update::kLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff_Update::Delta_Diff_Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff.Update)
}
Delta_Diff_Update::Delta_Diff_Update(const Delta_Diff_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  src_ = from.src_;
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff.Update)
}

void Delta_Diff_Update::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_ = 0;
  _cached_size_ = 0;
}

Delta_Diff_Update::~Delta_Diff_Update() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff.Update)
  SharedDtor();
}

void Delta_Diff_Update::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Delta_Diff_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff_Update::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff_Update& Delta_Diff_Update::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff_Update* Delta_Diff_Update::New(::google::protobuf::Arena* arena) const {
  Delta_Diff_Update* n = new Delta_Diff_Update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff.Update)
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_ = 0;
}

bool Delta_Diff_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff.Update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Delta.Diff.Update.label"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff.Update)
  return false;
#undef DO_
}

void Delta_Diff_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.Diff.Update.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff.Update)
}

::google::protobuf::uint8* Delta_Diff_Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 src = 1;
  if (this->src() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.Diff.Update.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff.Update)
  return target;
}

size_t Delta_Diff_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff.Update)
  size_t total_size = 0;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->label());
  }

  // int32 src = 1;
  if (this->src() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->src());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff_Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff_Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff.Update)
    MergeFrom(*source);
  }
}

void Delta_Diff_Update::MergeFrom(const Delta_Diff_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.src() != 0) {
    set_src(from.src());
  }
}

void Delta_Diff_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff_Update::CopyFrom(const Delta_Diff_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff_Update::IsInitialized() const {
  return true;
}

void Delta_Diff_Update::Swap(Delta_Diff_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff_Update::InternalSwap(Delta_Diff_Update* other) {
  label_.Swap(&other->label_);
  std::swap(src_, other->src_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff_Update::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff_Update

// int32 src = 1;
void Delta_Diff_Update::clear_src() {
  src_ = 0;
}
::google::protobuf::int32 Delta_Diff_Update::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Update.src)
  return src_;
}
void Delta_Diff_Update::set_src(::google::protobuf::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Update.src)
}

// string label = 2;
void Delta_Diff_Update::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta_Diff_Update::label() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.Update.label)
  return label_.GetNoArena();
}
void Delta_Diff_Update::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.Update.label)
}
#if LANG_CXX11
void Delta_Diff_Update::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Delta.Diff.Update.label)
}
#endif
void Delta_Diff_Update::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Delta.Diff.Update.label)
}
void Delta_Diff_Update::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Delta.Diff.Update.label)
}
::std::string* Delta_Diff_Update::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.Update.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta_Diff_Update::release_label() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.Update.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta_Diff_Update::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.Update.label)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta_Diff::kTypeFieldNumber;
const int Delta_Diff::kMatchFieldNumber;
const int Delta_Diff::kAddFieldNumber;
const int Delta_Diff::kDelFieldNumber;
const int Delta_Diff::kMoveFieldNumber;
const int Delta_Diff::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta_Diff::Delta_Diff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta.Diff)
}
Delta_Diff::Delta_Diff(const Delta_Diff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_delta();
  switch (from.delta_case()) {
    case kMatch: {
      mutable_match()->::fast::Delta_Diff_Match::MergeFrom(from.match());
      break;
    }
    case kAdd: {
      mutable_add()->::fast::Delta_Diff_Add::MergeFrom(from.add());
      break;
    }
    case kDel: {
      mutable_del()->::fast::Delta_Diff_Del::MergeFrom(from.del());
      break;
    }
    case kMove: {
      mutable_move()->::fast::Delta_Diff_Move::MergeFrom(from.move());
      break;
    }
    case kUpdate: {
      mutable_update()->::fast::Delta_Diff_Update::MergeFrom(from.update());
      break;
    }
    case DELTA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fast.Delta.Diff)
}

void Delta_Diff::SharedCtor() {
  type_ = 0;
  clear_has_delta();
  _cached_size_ = 0;
}

Delta_Diff::~Delta_Diff() {
  // @@protoc_insertion_point(destructor:fast.Delta.Diff)
  SharedDtor();
}

void Delta_Diff::SharedDtor() {
  if (has_delta()) {
    clear_delta();
  }
}

void Delta_Diff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta_Diff::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta_Diff& Delta_Diff::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta_Diff* Delta_Diff::New(::google::protobuf::Arena* arena) const {
  Delta_Diff* n = new Delta_Diff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta_Diff::clear_delta() {
// @@protoc_insertion_point(one_of_clear_start:fast.Delta.Diff)
  switch (delta_case()) {
    case kMatch: {
      delete delta_.match_;
      break;
    }
    case kAdd: {
      delete delta_.add_;
      break;
    }
    case kDel: {
      delete delta_.del_;
      break;
    }
    case kMove: {
      delete delta_.move_;
      break;
    }
    case kUpdate: {
      delete delta_.update_;
      break;
    }
    case DELTA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DELTA_NOT_SET;
}


void Delta_Diff::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta.Diff)
  type_ = 0;
  clear_delta();
}

bool Delta_Diff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta.Diff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .fast.Delta.Diff.DeltaType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::fast::Delta_Diff_DeltaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Delta.Diff.Match match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Delta.Diff.Add add = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Delta.Diff.Del del = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Delta.Diff.Move move = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .fast.Delta.Diff.Update update = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta.Diff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta.Diff)
  return false;
#undef DO_
}

void Delta_Diff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta.Diff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Delta.Diff.DeltaType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .fast.Delta.Diff.Match match = 2;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *delta_.match_, output);
  }

  // .fast.Delta.Diff.Add add = 3;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *delta_.add_, output);
  }

  // .fast.Delta.Diff.Del del = 4;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *delta_.del_, output);
  }

  // .fast.Delta.Diff.Move move = 5;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *delta_.move_, output);
  }

  // .fast.Delta.Diff.Update update = 6;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *delta_.update_, output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta.Diff)
}

::google::protobuf::uint8* Delta_Diff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta.Diff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fast.Delta.Diff.DeltaType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .fast.Delta.Diff.Match match = 2;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *delta_.match_, deterministic, target);
  }

  // .fast.Delta.Diff.Add add = 3;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *delta_.add_, deterministic, target);
  }

  // .fast.Delta.Diff.Del del = 4;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *delta_.del_, deterministic, target);
  }

  // .fast.Delta.Diff.Move move = 5;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *delta_.move_, deterministic, target);
  }

  // .fast.Delta.Diff.Update update = 6;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *delta_.update_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta.Diff)
  return target;
}

size_t Delta_Diff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta.Diff)
  size_t total_size = 0;

  // .fast.Delta.Diff.DeltaType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (delta_case()) {
    // .fast.Delta.Diff.Match match = 2;
    case kMatch: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delta_.match_);
      break;
    }
    // .fast.Delta.Diff.Add add = 3;
    case kAdd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delta_.add_);
      break;
    }
    // .fast.Delta.Diff.Del del = 4;
    case kDel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delta_.del_);
      break;
    }
    // .fast.Delta.Diff.Move move = 5;
    case kMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delta_.move_);
      break;
    }
    // .fast.Delta.Diff.Update update = 6;
    case kUpdate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *delta_.update_);
      break;
    }
    case DELTA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta_Diff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta_Diff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta_Diff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta.Diff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta.Diff)
    MergeFrom(*source);
  }
}

void Delta_Diff::MergeFrom(const Delta_Diff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta.Diff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.delta_case()) {
    case kMatch: {
      mutable_match()->::fast::Delta_Diff_Match::MergeFrom(from.match());
      break;
    }
    case kAdd: {
      mutable_add()->::fast::Delta_Diff_Add::MergeFrom(from.add());
      break;
    }
    case kDel: {
      mutable_del()->::fast::Delta_Diff_Del::MergeFrom(from.del());
      break;
    }
    case kMove: {
      mutable_move()->::fast::Delta_Diff_Move::MergeFrom(from.move());
      break;
    }
    case kUpdate: {
      mutable_update()->::fast::Delta_Diff_Update::MergeFrom(from.update());
      break;
    }
    case DELTA_NOT_SET: {
      break;
    }
  }
}

void Delta_Diff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta_Diff::CopyFrom(const Delta_Diff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta.Diff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta_Diff::IsInitialized() const {
  return true;
}

void Delta_Diff::Swap(Delta_Diff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta_Diff::InternalSwap(Delta_Diff* other) {
  std::swap(type_, other->type_);
  std::swap(delta_, other->delta_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta_Diff::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta_Diff

// .fast.Delta.Diff.DeltaType type = 1;
void Delta_Diff::clear_type() {
  type_ = 0;
}
::fast::Delta_Diff_DeltaType Delta_Diff::type() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.type)
  return static_cast< ::fast::Delta_Diff_DeltaType >(type_);
}
void Delta_Diff::set_type(::fast::Delta_Diff_DeltaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:fast.Delta.Diff.type)
}

// .fast.Delta.Diff.Match match = 2;
bool Delta_Diff::has_match() const {
  return delta_case() == kMatch;
}
void Delta_Diff::set_has_match() {
  _oneof_case_[0] = kMatch;
}
void Delta_Diff::clear_match() {
  if (has_match()) {
    delete delta_.match_;
    clear_has_delta();
  }
}
 const ::fast::Delta_Diff_Match& Delta_Diff::match() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.match)
  return has_match()
      ? *delta_.match_
      : ::fast::Delta_Diff_Match::default_instance();
}
::fast::Delta_Diff_Match* Delta_Diff::mutable_match() {
  if (!has_match()) {
    clear_delta();
    set_has_match();
    delta_.match_ = new ::fast::Delta_Diff_Match;
  }
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.match)
  return delta_.match_;
}
::fast::Delta_Diff_Match* Delta_Diff::release_match() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.match)
  if (has_match()) {
    clear_has_delta();
    ::fast::Delta_Diff_Match* temp = delta_.match_;
    delta_.match_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Delta_Diff::set_allocated_match(::fast::Delta_Diff_Match* match) {
  clear_delta();
  if (match) {
    set_has_match();
    delta_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.match)
}

// .fast.Delta.Diff.Add add = 3;
bool Delta_Diff::has_add() const {
  return delta_case() == kAdd;
}
void Delta_Diff::set_has_add() {
  _oneof_case_[0] = kAdd;
}
void Delta_Diff::clear_add() {
  if (has_add()) {
    delete delta_.add_;
    clear_has_delta();
  }
}
 const ::fast::Delta_Diff_Add& Delta_Diff::add() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.add)
  return has_add()
      ? *delta_.add_
      : ::fast::Delta_Diff_Add::default_instance();
}
::fast::Delta_Diff_Add* Delta_Diff::mutable_add() {
  if (!has_add()) {
    clear_delta();
    set_has_add();
    delta_.add_ = new ::fast::Delta_Diff_Add;
  }
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.add)
  return delta_.add_;
}
::fast::Delta_Diff_Add* Delta_Diff::release_add() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.add)
  if (has_add()) {
    clear_has_delta();
    ::fast::Delta_Diff_Add* temp = delta_.add_;
    delta_.add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Delta_Diff::set_allocated_add(::fast::Delta_Diff_Add* add) {
  clear_delta();
  if (add) {
    set_has_add();
    delta_.add_ = add;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.add)
}

// .fast.Delta.Diff.Del del = 4;
bool Delta_Diff::has_del() const {
  return delta_case() == kDel;
}
void Delta_Diff::set_has_del() {
  _oneof_case_[0] = kDel;
}
void Delta_Diff::clear_del() {
  if (has_del()) {
    delete delta_.del_;
    clear_has_delta();
  }
}
 const ::fast::Delta_Diff_Del& Delta_Diff::del() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.del)
  return has_del()
      ? *delta_.del_
      : ::fast::Delta_Diff_Del::default_instance();
}
::fast::Delta_Diff_Del* Delta_Diff::mutable_del() {
  if (!has_del()) {
    clear_delta();
    set_has_del();
    delta_.del_ = new ::fast::Delta_Diff_Del;
  }
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.del)
  return delta_.del_;
}
::fast::Delta_Diff_Del* Delta_Diff::release_del() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.del)
  if (has_del()) {
    clear_has_delta();
    ::fast::Delta_Diff_Del* temp = delta_.del_;
    delta_.del_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Delta_Diff::set_allocated_del(::fast::Delta_Diff_Del* del) {
  clear_delta();
  if (del) {
    set_has_del();
    delta_.del_ = del;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.del)
}

// .fast.Delta.Diff.Move move = 5;
bool Delta_Diff::has_move() const {
  return delta_case() == kMove;
}
void Delta_Diff::set_has_move() {
  _oneof_case_[0] = kMove;
}
void Delta_Diff::clear_move() {
  if (has_move()) {
    delete delta_.move_;
    clear_has_delta();
  }
}
 const ::fast::Delta_Diff_Move& Delta_Diff::move() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.move)
  return has_move()
      ? *delta_.move_
      : ::fast::Delta_Diff_Move::default_instance();
}
::fast::Delta_Diff_Move* Delta_Diff::mutable_move() {
  if (!has_move()) {
    clear_delta();
    set_has_move();
    delta_.move_ = new ::fast::Delta_Diff_Move;
  }
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.move)
  return delta_.move_;
}
::fast::Delta_Diff_Move* Delta_Diff::release_move() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.move)
  if (has_move()) {
    clear_has_delta();
    ::fast::Delta_Diff_Move* temp = delta_.move_;
    delta_.move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Delta_Diff::set_allocated_move(::fast::Delta_Diff_Move* move) {
  clear_delta();
  if (move) {
    set_has_move();
    delta_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.move)
}

// .fast.Delta.Diff.Update update = 6;
bool Delta_Diff::has_update() const {
  return delta_case() == kUpdate;
}
void Delta_Diff::set_has_update() {
  _oneof_case_[0] = kUpdate;
}
void Delta_Diff::clear_update() {
  if (has_update()) {
    delete delta_.update_;
    clear_has_delta();
  }
}
 const ::fast::Delta_Diff_Update& Delta_Diff::update() const {
  // @@protoc_insertion_point(field_get:fast.Delta.Diff.update)
  return has_update()
      ? *delta_.update_
      : ::fast::Delta_Diff_Update::default_instance();
}
::fast::Delta_Diff_Update* Delta_Diff::mutable_update() {
  if (!has_update()) {
    clear_delta();
    set_has_update();
    delta_.update_ = new ::fast::Delta_Diff_Update;
  }
  // @@protoc_insertion_point(field_mutable:fast.Delta.Diff.update)
  return delta_.update_;
}
::fast::Delta_Diff_Update* Delta_Diff::release_update() {
  // @@protoc_insertion_point(field_release:fast.Delta.Diff.update)
  if (has_update()) {
    clear_has_delta();
    ::fast::Delta_Diff_Update* temp = delta_.update_;
    delta_.update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Delta_Diff::set_allocated_update(::fast::Delta_Diff_Update* update) {
  clear_delta();
  if (update) {
    set_has_update();
    delta_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.Diff.update)
}

bool Delta_Diff::has_delta() const {
  return delta_case() != DELTA_NOT_SET;
}
void Delta_Diff::clear_has_delta() {
  _oneof_case_[0] = DELTA_NOT_SET;
}
Delta_Diff::DeltaCase Delta_Diff::delta_case() const {
  return Delta_Diff::DeltaCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta::kSrcFieldNumber;
const int Delta::kDstFieldNumber;
const int Delta::kDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta::Delta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fast_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fast.Delta)
}
Delta::Delta(const Delta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      diff_(from.diff_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.src().size() > 0) {
    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dst().size() > 0) {
    dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
  }
  // @@protoc_insertion_point(copy_constructor:fast.Delta)
}

void Delta::SharedCtor() {
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:fast.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Delta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Delta& Delta::default_instance() {
  protobuf_fast_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta* Delta::New(::google::protobuf::Arena* arena) const {
  Delta* n = new Delta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta::Clear() {
// @@protoc_insertion_point(message_clear_start:fast.Delta)
  diff_.Clear();
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fast.Delta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string src = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Delta.src"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dst = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fast.Delta.dst"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .fast.Delta.Diff diff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fast.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fast.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fast.Delta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // string dst = 2;
  if (this->dst().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.dst");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dst(), output);
  }

  // repeated .fast.Delta.Diff diff = 3;
  for (unsigned int i = 0, n = this->diff_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->diff(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fast.Delta)
}

::google::protobuf::uint8* Delta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fast.Delta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string src = 1;
  if (this->src().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // string dst = 2;
  if (this->dst().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "fast.Delta.dst");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  // repeated .fast.Delta.Diff diff = 3;
  for (unsigned int i = 0, n = this->diff_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->diff(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fast.Delta)
  return target;
}

size_t Delta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fast.Delta)
  size_t total_size = 0;

  // repeated .fast.Delta.Diff diff = 3;
  {
    unsigned int count = this->diff_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diff(i));
    }
  }

  // string src = 1;
  if (this->src().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  // string dst = 2;
  if (this->dst().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fast.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fast.Delta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fast.Delta)
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fast.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  diff_.MergeFrom(from.diff_);
  if (from.src().size() > 0) {

    src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
  }
  if (from.dst().size() > 0) {

    dst_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_);
  }
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fast.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fast.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {
  return true;
}

void Delta::Swap(Delta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta::InternalSwap(Delta* other) {
  diff_.InternalSwap(&other->diff_);
  src_.Swap(&other->src_);
  dst_.Swap(&other->dst_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_fast_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fast_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta

// string src = 1;
void Delta::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::src() const {
  // @@protoc_insertion_point(field_get:fast.Delta.src)
  return src_.GetNoArena();
}
void Delta::set_src(const ::std::string& value) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Delta.src)
}
#if LANG_CXX11
void Delta::set_src(::std::string&& value) {
  
  src_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Delta.src)
}
#endif
void Delta::set_src(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Delta.src)
}
void Delta::set_src(const char* value, size_t size) {
  
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Delta.src)
}
::std::string* Delta::mutable_src() {
  
  // @@protoc_insertion_point(field_mutable:fast.Delta.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_src() {
  // @@protoc_insertion_point(field_release:fast.Delta.src)
  
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    
  } else {
    
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.src)
}

// string dst = 2;
void Delta::clear_dst() {
  dst_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::dst() const {
  // @@protoc_insertion_point(field_get:fast.Delta.dst)
  return dst_.GetNoArena();
}
void Delta::set_dst(const ::std::string& value) {
  
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fast.Delta.dst)
}
#if LANG_CXX11
void Delta::set_dst(::std::string&& value) {
  
  dst_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fast.Delta.dst)
}
#endif
void Delta::set_dst(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fast.Delta.dst)
}
void Delta::set_dst(const char* value, size_t size) {
  
  dst_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fast.Delta.dst)
}
::std::string* Delta::mutable_dst() {
  
  // @@protoc_insertion_point(field_mutable:fast.Delta.dst)
  return dst_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_dst() {
  // @@protoc_insertion_point(field_release:fast.Delta.dst)
  
  return dst_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_dst(::std::string* dst) {
  if (dst != NULL) {
    
  } else {
    
  }
  dst_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst);
  // @@protoc_insertion_point(field_set_allocated:fast.Delta.dst)
}

// repeated .fast.Delta.Diff diff = 3;
int Delta::diff_size() const {
  return diff_.size();
}
void Delta::clear_diff() {
  diff_.Clear();
}
const ::fast::Delta_Diff& Delta::diff(int index) const {
  // @@protoc_insertion_point(field_get:fast.Delta.diff)
  return diff_.Get(index);
}
::fast::Delta_Diff* Delta::mutable_diff(int index) {
  // @@protoc_insertion_point(field_mutable:fast.Delta.diff)
  return diff_.Mutable(index);
}
::fast::Delta_Diff* Delta::add_diff() {
  // @@protoc_insertion_point(field_add:fast.Delta.diff)
  return diff_.Add();
}
::google::protobuf::RepeatedPtrField< ::fast::Delta_Diff >*
Delta::mutable_diff() {
  // @@protoc_insertion_point(field_mutable_list:fast.Delta.diff)
  return &diff_;
}
const ::google::protobuf::RepeatedPtrField< ::fast::Delta_Diff >&
Delta::diff() const {
  // @@protoc_insertion_point(field_list:fast.Delta.diff)
  return diff_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fast

// @@protoc_insertion_point(global_scope)
