// automatically generated by the FlatBuffers compiler, do not modify

package _fast;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Delta extends Table {
  public static Delta getRootAsDelta(ByteBuffer _bb) { return getRootAsDelta(_bb, new Delta()); }
  public static Delta getRootAsDelta(ByteBuffer _bb, Delta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Delta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String src() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer srcAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String dst() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dstAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public _fast._Delta.Diff diff(int j) { return diff(new _fast._Delta.Diff(), j); }
  public _fast._Delta.Diff diff(_fast._Delta.Diff obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int diffLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createDelta(FlatBufferBuilder builder,
      int srcOffset,
      int dstOffset,
      int diffOffset) {
    builder.startObject(3);
    Delta.addDiff(builder, diffOffset);
    Delta.addDst(builder, dstOffset);
    Delta.addSrc(builder, srcOffset);
    return Delta.endDelta(builder);
  }

  public static void startDelta(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSrc(FlatBufferBuilder builder, int srcOffset) { builder.addOffset(0, srcOffset, 0); }
  public static void addDst(FlatBufferBuilder builder, int dstOffset) { builder.addOffset(1, dstOffset, 0); }
  public static void addDiff(FlatBufferBuilder builder, int diffOffset) { builder.addOffset(2, diffOffset, 0); }
  public static int createDiffVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiffVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDelta(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

