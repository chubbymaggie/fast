// automatically generated by the FlatBuffers compiler, do not modify

package _fast._Slices._Slice;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class SourceFile extends Table {
  public static SourceFile getRootAsSourceFile(ByteBuffer _bb) { return getRootAsSourceFile(_bb, new SourceFile()); }
  public static SourceFile getRootAsSourceFile(ByteBuffer _bb, SourceFile obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public SourceFile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public _fast._Slices._Slice._SourceFile.Function function(int j) { return function(new _fast._Slices._Slice._SourceFile.Function(), j); }
  public _fast._Slices._Slice._SourceFile.Function function(_fast._Slices._Slice._SourceFile.Function obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int functionLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public int type() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createSourceFile(FlatBufferBuilder builder,
      int functionOffset,
      int nameOffset,
      int type) {
    builder.startObject(3);
    SourceFile.addType(builder, type);
    SourceFile.addName(builder, nameOffset);
    SourceFile.addFunction(builder, functionOffset);
    return SourceFile.endSourceFile(builder);
  }

  public static void startSourceFile(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addFunction(FlatBufferBuilder builder, int functionOffset) { builder.addOffset(0, functionOffset, 0); }
  public static int createFunctionVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFunctionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addInt(2, type, 0); }
  public static int endSourceFile(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

