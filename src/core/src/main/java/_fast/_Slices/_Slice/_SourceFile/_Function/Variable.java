// automatically generated by the FlatBuffers compiler, do not modify

package _fast._Slices._Slice._SourceFile._Function;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Variable extends Table {
  public static Variable getRootAsVariable(ByteBuffer _bb) { return getRootAsVariable(_bb, new Variable()); }
  public static Variable getRootAsVariable(ByteBuffer _bb, Variable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Variable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position pos() { return pos(new _fast._Slices._Slice._SourceFile._Function._Variable.Position()); }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position pos(_fast._Slices._Slice._SourceFile._Function._Variable.Position obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int type() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position defn(int j) { return defn(new _fast._Slices._Slice._SourceFile._Function._Variable.Position(), j); }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position defn(_fast._Slices._Slice._SourceFile._Function._Variable.Position obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int defnLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position use(int j) { return use(new _fast._Slices._Slice._SourceFile._Function._Variable.Position(), j); }
  public _fast._Slices._Slice._SourceFile._Function._Variable.Position use(_fast._Slices._Slice._SourceFile._Function._Variable.Position obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int useLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public String dvar(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dvarLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public String alias(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int aliasLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public _fast._Slices._Slice._SourceFile._Function._Variable.FunctionDecl cfunc(int j) { return cfunc(new _fast._Slices._Slice._SourceFile._Function._Variable.FunctionDecl(), j); }
  public _fast._Slices._Slice._SourceFile._Function._Variable.FunctionDecl cfunc(_fast._Slices._Slice._SourceFile._Function._Variable.FunctionDecl obj, int j) { int o = __offset(18); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int cfuncLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }

  public static int createVariable(FlatBufferBuilder builder,
      int nameOffset,
      int posOffset,
      int type,
      int defnOffset,
      int useOffset,
      int dvarOffset,
      int aliasOffset,
      int cfuncOffset) {
    builder.startObject(8);
    Variable.addCfunc(builder, cfuncOffset);
    Variable.addAlias(builder, aliasOffset);
    Variable.addDvar(builder, dvarOffset);
    Variable.addUse(builder, useOffset);
    Variable.addDefn(builder, defnOffset);
    Variable.addType(builder, type);
    Variable.addPos(builder, posOffset);
    Variable.addName(builder, nameOffset);
    return Variable.endVariable(builder);
  }

  public static void startVariable(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addPos(FlatBufferBuilder builder, int posOffset) { builder.addOffset(1, posOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addInt(2, type, 0); }
  public static void addDefn(FlatBufferBuilder builder, int defnOffset) { builder.addOffset(3, defnOffset, 0); }
  public static int createDefnVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDefnVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUse(FlatBufferBuilder builder, int useOffset) { builder.addOffset(4, useOffset, 0); }
  public static int createUseVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUseVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDvar(FlatBufferBuilder builder, int dvarOffset) { builder.addOffset(5, dvarOffset, 0); }
  public static int createDvarVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDvarVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAlias(FlatBufferBuilder builder, int aliasOffset) { builder.addOffset(6, aliasOffset, 0); }
  public static int createAliasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAliasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCfunc(FlatBufferBuilder builder, int cfuncOffset) { builder.addOffset(7, cfuncOffset, 0); }
  public static int createCfuncVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCfuncVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endVariable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

