// automatically generated by the FlatBuffers compiler, do not modify

package _fast;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Log extends Table {
  public static Log getRootAsLog(ByteBuffer _bb) { return getRootAsLog(_bb, new Log()); }
  public static Log getRootAsLog(ByteBuffer _bb, Log obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Log __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public _fast._Log.Commit commit(int j) { return commit(new _fast._Log.Commit(), j); }
  public _fast._Log.Commit commit(_fast._Log.Commit obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int commitLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public _fast._Log.Author author(int j) { return author(new _fast._Log.Author(), j); }
  public _fast._Log.Author author(_fast._Log.Author obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int authorLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createLog(FlatBufferBuilder builder,
      int commitOffset,
      int authorOffset) {
    builder.startObject(2);
    Log.addAuthor(builder, authorOffset);
    Log.addCommit(builder, commitOffset);
    return Log.endLog(builder);
  }

  public static void startLog(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addCommit(FlatBufferBuilder builder, int commitOffset) { builder.addOffset(0, commitOffset, 0); }
  public static int createCommitVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCommitVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAuthor(FlatBufferBuilder builder, int authorOffset) { builder.addOffset(1, authorOffset, 0); }
  public static int createAuthorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAuthorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLog(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

