// automatically generated by the FlatBuffers compiler, do not modify

package _fast._Log;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Commit extends Table {
  public static Commit getRootAsCommit(ByteBuffer _bb) { return getRootAsCommit(_bb, new Commit()); }
  public static Commit getRootAsCommit(ByteBuffer _bb, Commit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Commit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String text() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public int authorId() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String authorDate() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer authorDateAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public _fast._Log._Commit.Anonymous3 extra() { return extra(new _fast._Log._Commit.Anonymous3()); }
  public _fast._Log._Commit.Anonymous3 extra(_fast._Log._Commit.Anonymous3 obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public _fast._Log._Commit.Diff diff(int j) { return diff(new _fast._Log._Commit.Diff(), j); }
  public _fast._Log._Commit.Diff diff(_fast._Log._Commit.Diff obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int diffLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public _fast.Slices slice() { return slice(new _fast.Slices()); }
  public _fast.Slices slice(_fast.Slices obj) { int o = __offset(16); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createCommit(FlatBufferBuilder builder,
      int idOffset,
      int textOffset,
      int author_id,
      int author_dateOffset,
      int extraOffset,
      int diffOffset,
      int sliceOffset) {
    builder.startObject(7);
    Commit.addSlice(builder, sliceOffset);
    Commit.addDiff(builder, diffOffset);
    Commit.addExtra(builder, extraOffset);
    Commit.addAuthorDate(builder, author_dateOffset);
    Commit.addAuthorId(builder, author_id);
    Commit.addText(builder, textOffset);
    Commit.addId(builder, idOffset);
    return Commit.endCommit(builder);
  }

  public static void startCommit(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(1, textOffset, 0); }
  public static void addAuthorId(FlatBufferBuilder builder, int authorId) { builder.addInt(2, authorId, 0); }
  public static void addAuthorDate(FlatBufferBuilder builder, int authorDateOffset) { builder.addOffset(3, authorDateOffset, 0); }
  public static void addExtra(FlatBufferBuilder builder, int extraOffset) { builder.addOffset(4, extraOffset, 0); }
  public static void addDiff(FlatBufferBuilder builder, int diffOffset) { builder.addOffset(5, diffOffset, 0); }
  public static int createDiffVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiffVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSlice(FlatBufferBuilder builder, int sliceOffset) { builder.addOffset(6, sliceOffset, 0); }
  public static int endCommit(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

