// automatically generated by the FlatBuffers compiler, do not modify

package _fast._Log._Commit._Diff._Hunk;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ModLine extends Table {
  public static ModLine getRootAsModLine(ByteBuffer _bb) { return getRootAsModLine(_bb, new ModLine()); }
  public static ModLine getRootAsModLine(ByteBuffer _bb, ModLine obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ModLine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String line() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lineAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public boolean isAdd() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean isDel() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createModLine(FlatBufferBuilder builder,
      int lineOffset,
      boolean is_add,
      boolean is_del) {
    builder.startObject(3);
    ModLine.addLine(builder, lineOffset);
    ModLine.addIsDel(builder, is_del);
    ModLine.addIsAdd(builder, is_add);
    return ModLine.endModLine(builder);
  }

  public static void startModLine(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addLine(FlatBufferBuilder builder, int lineOffset) { builder.addOffset(0, lineOffset, 0); }
  public static void addIsAdd(FlatBufferBuilder builder, boolean isAdd) { builder.addBoolean(1, isAdd, false); }
  public static void addIsDel(FlatBufferBuilder builder, boolean isDel) { builder.addBoolean(2, isDel, false); }
  public static int endModLine(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

