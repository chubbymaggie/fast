// automatically generated by the FlatBuffers compiler, do not modify

package _fast._Slices;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Slice extends Table {
  public static Slice getRootAsSlice(ByteBuffer _bb) { return getRootAsSlice(_bb, new Slice()); }
  public static Slice getRootAsSlice(ByteBuffer _bb, Slice obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Slice __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public _fast._Slices._Slice.SourceFile file(int j) { return file(new _fast._Slices._Slice.SourceFile(), j); }
  public _fast._Slices._Slice.SourceFile file(_fast._Slices._Slice.SourceFile obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fileLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public String hash() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createSlice(FlatBufferBuilder builder,
      int fileOffset,
      int hashOffset) {
    builder.startObject(2);
    Slice.addHash(builder, hashOffset);
    Slice.addFile(builder, fileOffset);
    return Slice.endSlice(builder);
  }

  public static void startSlice(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addFile(FlatBufferBuilder builder, int fileOffset) { builder.addOffset(0, fileOffset, 0); }
  public static int createFileVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFileVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(1, hashOffset, 0); }
  public static int endSlice(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

