<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="Hello.java" hash="bfd57ebde1054a4752ce4bacccf3fc0c46814e94">
<class><specifier>public</specifier> class <name>Hello</name> <block>{
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name><name>args</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Hello, world!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="example.cc" hash="9e8d299806cf10f28fafe0659a50ce14db4eb41e"><function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">42</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="example.pb.cc" hash="9e8d299806cf10f28fafe0659a50ce14db4eb41e"><function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">42</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C#" filename="test.pb.cs" hash="68a1c8913f4705872412499fd69670bfd2213a67">@ <namespace>namespace <name><name>HandCoded</name><operator>.</operator><name>FpML</name><operator>.</operator><name>Validation</name></name>
return (<name>result</name></namespace>)<empty_stmt>;</empty_stmt>
}
		<comment type="line">// --------------------------------------------------------------------</comment>
		private <function><specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
							<argument><expr><literal type="string">"The side rate base currency must not be one of the trade currencies."</literal></expr></argument>,
							<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>period</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>period</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
						<call><name>ToInterval</name> <argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DividesDates</name><argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observation period is not a multiple of the calculationPeriodFrequency"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>schedule</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>freq</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>roll</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><literal type="string">"rollConvention"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>freq</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>roll</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type> 	<name>dates</name>	<init>= <expr><call><name>GenerateSchedule</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ToInterval</name> <argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DateRoll</name><operator>.</operator><name>ForName</name></name> <argument_list>(<argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<foreach>foreach <control>(<init><decl><type><name>Date</name></type> <name>match</name> <range>in <expr><name>dates</name></expr></range></decl></init>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
}</block></then></if>
					}</block></foreach>

					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with the schedule."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>		<init>= <expr><ternary><condition><expr><operator>(</operator><name>schedule</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>schedule</name><operator>.</operator><name>Count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>schedule</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <name><name>dates</name><operator>.</operator><name>Length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>match</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with a defined observationDate."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>ccy2Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy1Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy2Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy2Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy1Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currency payers and receivers don't match."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>date1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>date2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"currency1ValueDate and currency2ValueDate must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ndf</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"nonDeliverableForward"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>fwd</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ndf</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fwd</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Non-deliverable forward does not specify forwardPoints."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps must have at least two legs."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps legs must settle on different days."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"QuotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name><argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The base currency must be different from the side rate currencies."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialPayerReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialReceiverReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The initial payer and receiver must be different"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"startDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>maturity</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"maturityDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>maturity</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The maturity date must be after the start date"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>amount</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"principal"</literal></expr></argument>, <argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>amount</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The principal amount must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fixedRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The fixed rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>

					<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	  	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSwap"</literal></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>leg</name> <range>in <expr><name>legs</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></foreach>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY1PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY1"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency1 should not be expressed in terms of currency2."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY2PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY2"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency2 should not be expressed in terms of currency1."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<comment type="line">/// &lt;summary&gt;</comment>
		<comment type="line">/// Generates a set of dates according to schedule defined by a start date,</comment>
		<comment type="line">/// an end date, an interval, roll convention and a calendar.</comment>
		<comment type="line">/// &lt;/summary&gt;</comment>
		<comment type="line">/// &lt;param name="start"&gt;The start date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="end"&gt;The end date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="frequency"&gt;The frequency of the schedule (e.g. 6M).&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="roll"&gt;The date roll convention or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="calendar"&gt;The holiday calendar or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;returns&gt;An array of calculated and adjusted dates.&lt;/returns&gt;</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Date</name> <index>[]</index></name></type> <name>GenerateSchedule</name> <parameter_list>(<parameter><decl><type><name>Date</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>end</name></decl></parameter>,
			<parameter><decl><type><name>Interval</name></type> <name>frequency</name></decl></parameter>, <parameter><decl><type><name>DateRoll</name></type> <name>roll</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>calendar</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>Date</name></type>		<name>current</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ArrayList</name></type>	<name>found</name>	<init>= <expr><operator>new</operator> <call><name>ArrayList</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>Date</name></type>		<name>adjusted</name></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>roll</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <call><name><name>roll</name><operator>.</operator><name>Adjust</name></name> <argument_list>(<argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block></else></if>

				<if>if <condition>(<expr><operator>!</operator><call><name><name>found</name><operator>.</operator><name>Contains</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>Add</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

				<if>if <condition>(<expr><name><name>frequency</name><operator>.</operator><name>Period</name></name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>TERM</name></name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><break>break;</break></block></else></if>
				}</block></then>
<else>else
					<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>Plus</name></name> <argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></while>

			<expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>CopyTo</name></name> <argument_list>(<argument><expr><name>dates</name>  <operator>=</operator> <operator>new</operator> <name><name>Date</name> <index>[<expr><name><name>found</name><operator>.</operator><name>Count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>dates</name><operator>)</operator></expr>;</return>
}</block></function>
}
}
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C#" filename="test.cs" hash="68a1c8913f4705872412499fd69670bfd2213a67">@ <namespace>namespace <name><name>HandCoded</name><operator>.</operator><name>FpML</name><operator>.</operator><name>Validation</name></name>
return (<name>result</name></namespace>)<empty_stmt>;</empty_stmt>
}
		<comment type="line">// --------------------------------------------------------------------</comment>
		private <function><specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
							<argument><expr><literal type="string">"The side rate base currency must not be one of the trade currencies."</literal></expr></argument>,
							<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>period</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>period</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
						<call><name>ToInterval</name> <argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DividesDates</name><argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observation period is not a multiple of the calculationPeriodFrequency"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>schedule</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>freq</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>roll</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><literal type="string">"rollConvention"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>freq</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>roll</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type> 	<name>dates</name>	<init>= <expr><call><name>GenerateSchedule</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ToInterval</name> <argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DateRoll</name><operator>.</operator><name>ForName</name></name> <argument_list>(<argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<foreach>foreach <control>(<init><decl><type><name>Date</name></type> <name>match</name> <range>in <expr><name>dates</name></expr></range></decl></init>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
}</block></then></if>
					}</block></foreach>

					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with the schedule."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>		<init>= <expr><ternary><condition><expr><operator>(</operator><name>schedule</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>schedule</name><operator>.</operator><name>Count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>schedule</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <name><name>dates</name><operator>.</operator><name>Length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>match</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with a defined observationDate."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>ccy2Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy1Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy2Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy2Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy1Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currency payers and receivers don't match."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>date1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>date2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"currency1ValueDate and currency2ValueDate must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ndf</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"nonDeliverableForward"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>fwd</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ndf</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fwd</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Non-deliverable forward does not specify forwardPoints."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps must have at least two legs."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps legs must settle on different days."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"QuotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name><argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The base currency must be different from the side rate currencies."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialPayerReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialReceiverReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The initial payer and receiver must be different"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"startDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>maturity</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"maturityDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>maturity</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The maturity date must be after the start date"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>amount</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"principal"</literal></expr></argument>, <argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>amount</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The principal amount must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fixedRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The fixed rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>

					<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	  	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSwap"</literal></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>leg</name> <range>in <expr><name>legs</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></foreach>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY1PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY1"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency1 should not be expressed in terms of currency2."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY2PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY2"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency2 should not be expressed in terms of currency1."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<comment type="line">/// &lt;summary&gt;</comment>
		<comment type="line">/// Generates a set of dates according to schedule defined by a start date,</comment>
		<comment type="line">/// an end date, an interval, roll convention and a calendar.</comment>
		<comment type="line">/// &lt;/summary&gt;</comment>
		<comment type="line">/// &lt;param name="start"&gt;The start date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="end"&gt;The end date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="frequency"&gt;The frequency of the schedule (e.g. 6M).&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="roll"&gt;The date roll convention or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="calendar"&gt;The holiday calendar or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;returns&gt;An array of calculated and adjusted dates.&lt;/returns&gt;</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Date</name> <index>[]</index></name></type> <name>GenerateSchedule</name> <parameter_list>(<parameter><decl><type><name>Date</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>end</name></decl></parameter>,
			<parameter><decl><type><name>Interval</name></type> <name>frequency</name></decl></parameter>, <parameter><decl><type><name>DateRoll</name></type> <name>roll</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>calendar</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>Date</name></type>		<name>current</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ArrayList</name></type>	<name>found</name>	<init>= <expr><operator>new</operator> <call><name>ArrayList</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>Date</name></type>		<name>adjusted</name></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>roll</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <call><name><name>roll</name><operator>.</operator><name>Adjust</name></name> <argument_list>(<argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block></else></if>

				<if>if <condition>(<expr><operator>!</operator><call><name><name>found</name><operator>.</operator><name>Contains</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>Add</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

				<if>if <condition>(<expr><name><name>frequency</name><operator>.</operator><name>Period</name></name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>TERM</name></name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><break>break;</break></block></else></if>
				}</block></then>
<else>else
					<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>Plus</name></name> <argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></while>

			<expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>CopyTo</name></name> <argument_list>(<argument><expr><name>dates</name>  <operator>=</operator> <operator>new</operator> <name><name>Date</name> <index>[<expr><name><name>found</name><operator>.</operator><name>Count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>dates</name><operator>)</operator></expr>;</return>
}</block></function>
}
}
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C#" filename="test.fbs.cs" hash="68a1c8913f4705872412499fd69670bfd2213a67">@ <namespace>namespace <name><name>HandCoded</name><operator>.</operator><name>FpML</name><operator>.</operator><name>Validation</name></name>
return (<name>result</name></namespace>)<empty_stmt>;</empty_stmt>
}
		<comment type="line">// --------------------------------------------------------------------</comment>
		private <function><specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule02</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule02</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule03</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule03</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule04</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule04</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
							<argument><expr><literal type="string">"The side rate base currency must not be one of the trade currencies."</literal></expr></argument>,
							<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule05</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule05</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency1 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ExchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule06</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule06</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>ccy1</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sideRates"</literal></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>Equal</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The side rate currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<literal type="string">"' must be the same as trade currency2 '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>ccy</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule07</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule07</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule08</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAmericanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule08</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule09</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule09</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule10</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule10</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>period</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>period</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
						<call><name>ToInterval</name> <argument_list>(<argument><expr><name>period</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>DividesDates</name><argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observation period is not a multiple of the calculationPeriodFrequency"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule11</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule11</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule12</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule12</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationSchedule"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>schedule</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>freq</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>schedule</name></expr></argument>, <argument><expr><literal type="string">"calculationPeriodFrequency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>roll</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>freq</name></expr></argument>, <argument><expr><literal type="string">"rollConvention"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>freq</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>roll</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type> 	<name>dates</name>	<init>= <expr><call><name>GenerateSchedule</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ToInterval</name> <argument_list>(<argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>DateRoll</name><operator>.</operator><name>ForName</name></name> <argument_list>(<argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>roll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<foreach>foreach <control>(<init><decl><type><name>Date</name></type> <name>match</name> <range>in <expr><name>dates</name></expr></range></decl></init>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
}</block></then></if>
					}</block></foreach>

					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with the schedule."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule13</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule13</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>schedule</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>		<init>= <expr><ternary><condition><expr><operator>(</operator><name>schedule</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>schedule</name><operator>.</operator><name>Count</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>limit</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>schedule</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observedRates"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>observed</name> <range>in <expr><name>nodes</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>Date</name></type>		<name>date</name> 	 <init>= <expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>match</name> <operator>&lt;</operator> <name><name>dates</name><operator>.</operator><name>Length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>match</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>match</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
							<break>break;</break>
						}</block></then></if>
					}</block></for>
					<if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>observed</name></expr></argument>,
								<argument><expr><literal type="string">"Observation date '"</literal> <operator>+</operator> <call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<literal type="string">"' does not match with a defined observationDate."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>observed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
}</block></foreach>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule14</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule14</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationStartDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>end</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"observationEndDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>end</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>LessOrEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The observationStartDate must not be after the observationEndDate"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule15</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule15</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule16</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule16</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The spot rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule17</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxEuropeanTrigger"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule17</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule18</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule18</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Pay</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2Rec</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>ccy2Pay</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2Rec</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy1Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy2Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>ccy2Pay</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ccy1Rec</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currency payers and receivers don't match."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule19</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule19</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency1"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangedCurrency2"</literal></expr></argument>, <argument><expr><literal type="string">"paymentAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Exchanged currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule20</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule20</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>date1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>date2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"currency1ValueDate and currency2ValueDate must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule21</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule21</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ndf</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"nonDeliverableForward"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>fwd</name>		<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"exchangeRate"</literal></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ndf</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>fwd</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Non-deliverable forward does not specify forwardPoints."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule22</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule22</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxOptionLeg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSimpleOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule23</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule23</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule24</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxStrikePrice"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule24</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule25</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule25</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps must have at least two legs."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule26</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxSwap"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule26</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><call><name>Count</name> <argument_list>(<argument><expr><name>legs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>date2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name><name>legs</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>as</operator> <name>XmlElement</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>date2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"FX swaps legs must settle on different days."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"QuotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule27</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"quotedCurrencyPair"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule27</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule28</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule28</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>		<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
				<operator>&amp;</operator> <call><name>Rule29</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule29</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>forward</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"If forwardPoints exists then spotRate should also exist."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule30</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule30</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>forward</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"forwardPoints"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>spot</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"spotRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"rate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>forward</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>spot</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>Equals</name><argument_list>(<argument><expr><call><name>ToDecimal</name> <argument_list>(<argument><expr><name>spot</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ToDecimal</name> <argument_list>(<argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Sum of spotRate and forwardPoints does not equal rate."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule31</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule31</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type> 	<name>baseCcy</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"baseCurrency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>baseCcy</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The base currency must be different from the side rate currencies."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>baseCcy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule32</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule32</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialPayerReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"initialReceiverReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>NotEqual</name> <argument_list>(<argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The initial payer and receiver must be different"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule33</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule33</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>start</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"startDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>maturity</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"maturityDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>maturity</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The maturity date must be after the start date"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>maturity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule34</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule34</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>amount</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"principal"</literal></expr></argument>, <argument><expr><literal type="string">"amount"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>amount</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The principal amount must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TermDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule35</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"termDeposit"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule35</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type>	<name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fixedRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The fixed rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule36</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule36</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>
		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule37</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule37</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxBarrierOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule38</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule38</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>expiryDate</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDateTime"</literal></expr></argument>, <argument><expr><literal type="string">"expiryDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>tradeDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>expiryDate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Expiry date must be after trade date."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>expiryDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
				  <call><name>Rule39</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule39</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>

					<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

						<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
								<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
								<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule40</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"trade"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule40</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>tradeDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"tradeHeader"</literal></expr></argument>, <argument><expr><literal type="string">"tradeDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>legs</name>	  	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxSwap"</literal></expr></argument>, <argument><expr><literal type="string">"fxSingleLeg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>leg</name> <range>in <expr><name>legs</name></expr></range></decl></init>)</control> <block>{
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>valueDate</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"valueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value1Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency1ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>XmlElement</name></type>	<name>value2Date</name> 	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>leg</name></expr></argument>, <argument><expr><literal type="string">"currency2ValueDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>tradeDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>valueDate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
<argument><expr><literal type="string">"value date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>valueDate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value1Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value1date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value1Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>value2Date</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<if>if <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>tradeDate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ToDate</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
							<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>leg</name></expr></argument>,
									<argument><expr><literal type="string">"value2date must be after trade date."</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>value2Date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></foreach>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule41</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxBarrier"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule41</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>rate</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"triggerRate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>rate</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <call><name>IsPositive</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"The trigger rate must be positive"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule42</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule42</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlNodeList</name></type>	<name>nodes</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Paths</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"averageRateObservationDate"</literal></expr></argument>, <argument><expr><literal type="string">"observationDate"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>limit</name>	<init>= <expr><name><name>nodes</name><operator>.</operator><name>Count</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name>	<init>= <expr><operator>new</operator> <name><name>Date</name> <index>[<expr><name>limit</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>count</name></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>dates</name> <index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <call><name>ToDate</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <operator>(</operator><name>limit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>outer</name></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>inner</name> <init>= <expr><name>outer</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>limit</name></expr>;</condition> <incr><expr><operator>++</operator><name>inner</name></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name><name>dates</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dates</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>,
									<argument><expr><literal type="string">"Duplicate observation date"</literal></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name><name>nodes</name> <index>[<expr><name>inner</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></for>
}</block></for>
				<expr_stmt><expr><name>dates</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule43</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule43</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy1</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"putCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>ccy2</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"callCurrencyAmount"</literal></expr></argument>, <argument><expr><literal type="string">"currency"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>ccy1</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ccy2</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>IsSameCurrency</name> <argument_list>(<argument><expr><name>ccy1</name></expr></argument>, <argument><expr><name>ccy2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Put and call currencies must be different."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule44</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxAverageRateOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule44</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name> <argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
<block type="pseudo"><return>return <expr><operator>(</operator>
					  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FXDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call>
					<operator>&amp;</operator> <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
				  <call><name>Rule45</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"fxDigitalOption"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule45</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>buyer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"buyerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>seller</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"sellerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>payer</name>	 <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"payerPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>receiver</name> <init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"fxOptionPremium"</literal></expr></argument>, <argument><expr><literal type="string">"receiverPartyReference"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>buyer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>seller</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<operator>(</operator><name>payer</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>receiver</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>buyer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>payer</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>Equal</name> <argument_list>(<argument><expr><call><name><name>seller</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>receiver</name><operator>.</operator><name>GetAttribute</name></name><argument_list>(<argument><expr><literal type="string">"href"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Premium payer and receiver don't match with option buyer and seller."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
			<return>return <expr><operator>(</operator>
					  <call><name>Rule46</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>

		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule46</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency1SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY1PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY1"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency1 should not be expressed in terms of currency2."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></foreach>

			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>NodeIndex</name></type> <name>nodeIndex</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<if>if <condition>(<expr><name><name>nodeIndex</name><operator>.</operator><name>HasTypeInformation</name></name></expr>)</condition><then>
				<block type="pseudo"><return>return <expr><operator>(</operator><call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByType</name></name> <argument_list>(<argument><expr><call><name>DetermineNamespace</name> <argument_list>(<argument><expr><name>nodeIndex</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>

			<return>return <expr><operator>(</operator>
					  <call><name>Rule47</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>nodeIndex</name><operator>.</operator><name>GetElementsByName</name></name> <argument_list>(<argument><expr><literal type="string">"sideRates"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errorHandler</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
		}</block></function>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name>bool</name></type> <name>Rule47</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>XmlNodeList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>ValidationErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>bool</name></type>		<name>result</name>	<init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
			<foreach>foreach <control>(<init><decl><type><name>XmlElement</name></type> <name>context</name> <range>in <expr><name>list</name></expr></range></decl></init>)</control> <block>{
				<decl_stmt><decl><type><name>XmlElement</name></type>	<name>basis</name>	<init>= <expr><call><name><name>XPath</name><operator>.</operator><name>Path</name></name> <argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"currency2SideRate"</literal></expr></argument>, <argument><expr><literal type="string">"sideRateBasis"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><operator>(</operator><name>basis</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"CURRENCY2PERBASECURRENCY"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
					<call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>ToUpper</name> <argument_list>()</argument_list></call><operator>.</operator><call><name>Equals</name> <argument_list>(<argument><expr><literal type="string">"BASECURRENCYPERCURRENCY2"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><call><name>errorHandler</name> <argument_list>(<argument><expr><literal type="string">"305"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>,
						<argument><expr><literal type="string">"Side rate basis for currency2 should not be expressed in terms of currency1."</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ToToken</name> <argument_list>(<argument><expr><name>basis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			}</block></foreach>
			<return>return <expr><operator>(</operator><name>result</name><operator>)</operator></expr>;</return>
		}</block></function>

		<comment type="line">// --------------------------------------------------------------------</comment>

		<comment type="line">/// &lt;summary&gt;</comment>
		<comment type="line">/// Generates a set of dates according to schedule defined by a start date,</comment>
		<comment type="line">/// an end date, an interval, roll convention and a calendar.</comment>
		<comment type="line">/// &lt;/summary&gt;</comment>
		<comment type="line">/// &lt;param name="start"&gt;The start date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="end"&gt;The end date.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="frequency"&gt;The frequency of the schedule (e.g. 6M).&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="roll"&gt;The date roll convention or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;param name="calendar"&gt;The holiday calendar or &lt;c&gt;null&lt;/c&gt;.&lt;/param&gt;</comment>
		<comment type="line">/// &lt;returns&gt;An array of calculated and adjusted dates.&lt;/returns&gt;</comment>
		<function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Date</name> <index>[]</index></name></type> <name>GenerateSchedule</name> <parameter_list>(<parameter><decl><type><name>Date</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Date</name></type> <name>end</name></decl></parameter>,
			<parameter><decl><type><name>Interval</name></type> <name>frequency</name></decl></parameter>, <parameter><decl><type><name>DateRoll</name></type> <name>roll</name></decl></parameter>, <parameter><decl><type><name>Calendar</name></type> <name>calendar</name></decl></parameter>)</parameter_list>
		<block>{
			<decl_stmt><decl><type><name>Date</name></type>		<name>current</name> <init>= <expr><name>start</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ArrayList</name></type>	<name>found</name>	<init>= <expr><operator>new</operator> <call><name>ArrayList</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>Date</name> <index>[]</index></name></type>		<name>dates</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><call><name>Less</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>Date</name></type>		<name>adjusted</name></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>roll</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <call><name><name>roll</name><operator>.</operator><name>Adjust</name></name> <argument_list>(<argument><expr><name>calendar</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>adjusted</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt></block></else></if>

				<if>if <condition>(<expr><operator>!</operator><call><name><name>found</name><operator>.</operator><name>Contains</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>Add</name></name> <argument_list>(<argument><expr><name>adjusted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

				<if>if <condition>(<expr><name><name>frequency</name><operator>.</operator><name>Period</name></name> <operator>==</operator> <name><name>Period</name><operator>.</operator><name>TERM</name></name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><call><name>Equal</name> <argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block></then>
					<else>else
						<block type="pseudo"><break>break;</break></block></else></if>
				}</block></then>
<else>else
					<block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>Plus</name></name> <argument_list>(<argument><expr><name>frequency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></while>

			<expr_stmt><expr><call><name><name>found</name><operator>.</operator><name>CopyTo</name></name> <argument_list>(<argument><expr><name>dates</name>  <operator>=</operator> <operator>new</operator> <name><name>Date</name> <index>[<expr><name><name>found</name><operator>.</operator><name>Count</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>dates</name><operator>)</operator></expr>;</return>
}</block></function>
}
}
</unit>

</unit>
